Index: src/lesson2/HomeWork/Kalendar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/HomeWork/Kalendar.java b/src/lesson2/HomeWork/Kalendar.java
new file mode 100644
--- /dev/null	(date 1643202893209)
+++ b/src/lesson2/HomeWork/Kalendar.java	(date 1643202893209)
@@ -0,0 +1,33 @@
+package lesson2.HomeWork;
+
+import java.util.Scanner;
+
+public class Kalendar {
+    public static void main(String[] args) {
+        Scanner in = new Scanner(System.in);
+        System.out.println("Какой день вы выбрали ?");
+
+        int num = in.nextInt();
+
+        if(num>=1&&num<3){
+            System.out.println("Этот день из 1 недели ");
+        }else if(num>=3&&num<10){
+            System.out.println("Этот день из 2 недели ");
+        }else if(num>=10&&num<17){
+            System.out.println("Этот день из 3 недели ");
+        }else if(num>=17&&num<24){
+            System.out.println("Этот день из 4 недели ");
+        }else if(num>=24&&num<31){
+            System.out.println("Этот день из 5 недели ");
+        }else{
+            System.out.println("В календаре нету такого дня ");
+            in.close();
+        }
+
+
+
+
+
+
+    }
+}
Index: src/lesson2/HomeWork/Deleniye.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/HomeWork/Deleniye.java b/src/lesson2/HomeWork/Deleniye.java
new file mode 100644
--- /dev/null	(date 1643205791563)
+++ b/src/lesson2/HomeWork/Deleniye.java	(date 1643205791563)
@@ -0,0 +1,13 @@
+package lesson2.HomeWork;
+
+public class Deleniye {
+    public static void main(String[] args) {
+        int a = 0;
+        for(int i = 0;i<=10;i++){
+            //System.out.println(i);
+            if(i % 2 ==0){
+               // System.out.println(i);
+            }
+        }
+    }
+}
Index: src/lesson3/ForMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/ForMain.java b/src/lesson3/ForMain.java
new file mode 100644
--- /dev/null	(date 1643207250349)
+++ b/src/lesson3/ForMain.java	(date 1643207250349)
@@ -0,0 +1,19 @@
+package lesson3;
+
+public class ForMain {
+    public static void main(String[] args) {
+
+        for(int i = 0;i<10;i++){
+            if(i==5){
+                continue;
+            }
+            if(i==7){
+                continue;
+            }
+            if(i==9){
+                break;
+            }
+            System.out.println(i);//0,1,2,3,4,6,8
+        }
+    }
+}
Index: src/lesson3/For2Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/For2Main.java b/src/lesson3/For2Main.java
new file mode 100644
--- /dev/null	(date 1643207902723)
+++ b/src/lesson3/For2Main.java	(date 1643207902723)
@@ -0,0 +1,15 @@
+package lesson3;
+
+public class For2Main {
+    public static void main(String[] args) {
+
+        OUTER:for(int i = 0;i<24;i++){
+           INNER: for(int j =0;j<=59;j++){
+                System.out.println("ЧАС" + i + "минута"+ j);
+                if(j==30){
+                    break OUTER;
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/lesson3/WhileMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/WhileMain.java b/src/lesson3/WhileMain.java
new file mode 100644
--- /dev/null	(date 1643208514785)
+++ b/src/lesson3/WhileMain.java	(date 1643208514785)
@@ -0,0 +1,19 @@
+package lesson3;
+
+public class WhileMain {
+    public static void main(String[] args) {
+
+        boolean b= false ;
+
+          int i;
+          for(i = 0;i<10;i++){
+              if(i==9){
+                  b=true;
+              }
+        }
+          while(b){
+              System.out.println(i + "менешь 9");
+              break;
+          }
+    }
+}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1639757179197)
+++ b/.idea/.gitignore	(date 1639757179197)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/lesson3/TernaryMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/TernaryMain.java b/src/lesson3/TernaryMain.java
new file mode 100644
--- /dev/null	(date 1643210937985)
+++ b/src/lesson3/TernaryMain.java	(date 1643210937985)
@@ -0,0 +1,14 @@
+package lesson3;
+
+public class TernaryMain {
+    public static void main(String[] args) {
+
+        int i = 5;
+        boolean b = false;
+
+
+
+       // b = (i < 6) ? true : false;
+        //если ай меньше 6 то присвоить значение к б тру иначе фолс
+    }
+}
Index: src/lesson3/HomeWork/Timetable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/HomeWork/Timetable.java b/src/lesson3/HomeWork/Timetable.java
new file mode 100644
--- /dev/null	(date 1643287748055)
+++ b/src/lesson3/HomeWork/Timetable.java	(date 1643287748055)
@@ -0,0 +1,62 @@
+package lesson3.HomeWork;
+
+public class Timetable {
+    public static void main(String[] args) {
+
+        int week = 7;
+        int minute = 59;
+        int hour = 24;
+
+        String monday = "Понедельник";
+        String tuesday = "Вторник";
+        String wednesday = "Среда";
+        String thursday = "Четверг";
+        String friday = "Пятница";
+        String saturday = "Суббота";
+        String sunday = "Воскресенье";
+
+
+        OUTER:
+        for (int i = 0; i < hour; i++) {
+            if (i <= 6) {
+                System.out.println(" сплю " + i + " час");
+                continue;
+
+            }
+            if (i == 7) {
+                System.out.println("Проснулся в 7 утра иду завтракать");
+                continue;
+            }
+            if (i <= 8 && i == 8) {
+                System.out.println("Иду на работу до 16:00  на работе");
+                continue;
+            }
+            if (i <= 16 && i == 16) {
+                System.out.println("закончил работать  до занятия в 19:30");
+            }
+            if (i == 19) {
+                System.out.println("Учеба на Джаве ");
+                continue;
+            }
+            if (i <= 22 && i == 22) {
+                System.out.println("Заканчился урок еду домой ");
+                continue;
+            }
+            if (i == 23) {
+                System.out.println("Ложусь в 23:00 спать и завтра снова все по кругу");
+                continue;
+            }
+
+            INNTER:
+            for (int j = 0; j <= minute; j++) {
+                System.out.println("Час" + " " + i + " " + "минута" + " " + j + " " + " " + monday);
+
+            }
+
+        }
+    }
+}
+
+
+
+
Index: src/lesson4/MainMass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/MainMass.java b/src/lesson4/MainMass.java
new file mode 100644
--- /dev/null	(date 1643622265039)
+++ b/src/lesson4/MainMass.java	(date 1643622265039)
@@ -0,0 +1,10 @@
+package lesson4;
+
+public class MainMass {
+    public static void main(String[] args) {
+    int[]massInt={1,2,3,4,5};
+    double[]massD=new double[5];
+        massD[0]=0.1;
+        System.out.println(massD[0]);
+    }
+}
Index: src/lesson4/MainForAndMass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/MainForAndMass.java b/src/lesson4/MainForAndMass.java
new file mode 100644
--- /dev/null	(date 1643623545716)
+++ b/src/lesson4/MainForAndMass.java	(date 1643623545716)
@@ -0,0 +1,15 @@
+package lesson4;
+
+public class MainForAndMass {
+    public static void main(String[] args) {
+
+        int[] massInt = new int[10];
+        for (int i = 0; i < 10; i++) {
+            massInt[i] = i;
+            //System.out.println(massInt[i]);
+        }
+        for (int i = massInt.length-1; i >= -1; i--) {
+            System.out.println(massInt[i]);
+        }
+    }
+}
Index: src/lesson4/BubbleSortArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/BubbleSortArray.java b/src/lesson4/BubbleSortArray.java
new file mode 100644
--- /dev/null	(date 1643698799273)
+++ b/src/lesson4/BubbleSortArray.java	(date 1643698799273)
@@ -0,0 +1,28 @@
+package lesson4;
+
+// метод сортировки пузырьком
+public class BubbleSortArray {
+    public static void main(String[] args) {
+
+        int[] massInt = {11, 3, 14, 16, 7};
+        boolean isSort = false;
+        int save = 0;
+
+        while (!isSort) {
+            isSort=true;
+            for (int i = 0; i < massInt.length - 1; i++) {
+                if (massInt[i] > massInt[i + 1]) {
+                    isSort = false;
+
+                    save = massInt[i];
+                    massInt[i]=massInt[i+1];
+                    massInt[i+1]=save;
+
+                }
+            }
+        }
+        for(int i=0;i< massInt.length;i++){
+            System.out.println(massInt[i]);
+        }
+    }
+}
Index: src/lesson4/BubbleSortRevers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/BubbleSortRevers.java b/src/lesson4/BubbleSortRevers.java
new file mode 100644
--- /dev/null	(date 1643787634157)
+++ b/src/lesson4/BubbleSortRevers.java	(date 1643787634157)
@@ -0,0 +1,31 @@
+package lesson4;
+//сортировка пузырьком
+public class BubbleSortRevers {
+    public static void main(String[] args) {
+
+
+        int[] arrayM = {2, 3, 4, 5, 6, 7};
+
+        boolean inSort = false;
+        int save = 0;
+
+        while (!inSort) {
+            inSort = true;
+            for (int i = 0; i < arrayM.length - 1; i++) {
+                if (arrayM[i] < arrayM[i + 1]) {
+                    inSort = false;
+
+                    save = arrayM[i];
+                    arrayM[i] = arrayM[i + 1];
+                    arrayM[i + 1] = save;
+
+                }
+            }
+        }
+
+        for (int i = 0; i < arrayM.length; i++) {
+            System.out.println(arrayM[i]);
+
+        }
+    }
+}
Index: src/lesson4/Polindrom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Polindrom.java b/src/lesson4/Polindrom.java
new file mode 100644
--- /dev/null	(date 1643703651101)
+++ b/src/lesson4/Polindrom.java	(date 1643703651101)
@@ -0,0 +1,22 @@
+package lesson4;
+
+public class Polindrom {
+    public static void main(String[] args) {
+        int[] polindrom = {22,44,3,1,3,44,22,};
+
+        boolean isPolindrom=false;
+
+        for (int i = 0, j = polindrom.length-1; i < polindrom.length; i++, j--) {
+                if(polindrom[i]!=polindrom[j]){
+                    isPolindrom=false;
+                }else{
+                    isPolindrom=true;
+                }
+        }
+        if(isPolindrom){
+            System.out.println(" this is Polindrom");
+        }else{
+            System.out.println("This is not Polindrom");
+        }
+    }
+}
Index: src/lesson4/Polindrom1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Polindrom1.java b/src/lesson4/Polindrom1.java
new file mode 100644
--- /dev/null	(date 1643702673354)
+++ b/src/lesson4/Polindrom1.java	(date 1643702673354)
@@ -0,0 +1,40 @@
+package lesson4;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class Polindrom1 {
+    public static void main(String[] args) {
+        BufferedReader inputStream = new BufferedReader(new InputStreamReader(System.in));
+
+        try {
+
+            System.out.print("Sample input: ");
+            String input = inputStream.readLine();
+            System.out.print("Sample output: ");
+            System.out.print(isPalindrome(input));
+
+        } catch (IOException exception) {
+            System.err.println("Input error");
+        }
+    }
+
+    public static boolean isPalindrome(String input) {
+        Pattern pattern = Pattern.compile("\\w+");
+        Matcher matcher = pattern.matcher(input);
+        StringBuilder builder = new StringBuilder();
+
+        while (matcher.find())
+            builder.append(matcher.group());
+
+        String result = builder.toString();
+        String reverseResult = builder.reverse().toString();
+
+        if(result.compareToIgnoreCase(reverseResult) == 0)
+            return true;
+        return false;
+    }
+}
Index: src/lesson4/HomeWork/PolindromHomeWork.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/HomeWork/PolindromHomeWork.java b/src/lesson4/HomeWork/PolindromHomeWork.java
new file mode 100644
--- /dev/null	(date 1643717622186)
+++ b/src/lesson4/HomeWork/PolindromHomeWork.java	(date 1643717622186)
@@ -0,0 +1,18 @@
+package lesson4.HomeWork;
+
+public class PolindromHomeWork {
+    public static void main(String[] args) {
+
+        char[] massChar = {'е' , 'е' , 'н' , 'д' , 'е' , 'р' , 'с' , 'и' , ' ' , 'е' , 'о' , 'ш' , 'ь' , 'л' , 'о' , 'б' ,
+                ' ' , 'е' , 'о' , 'м' , 'а' , 'с' , ' ' , 'и' , 'д' , 'й' , 'а' , 'н' , ' ' , 'и' , ' ' , 't' , 'n' , 'i' ,
+                ' ' , 'а' , 'п' , 'и' , 'т' , ' ' , 'и' , 'м' , 'а' , 'т' , 'н' , 'е' , 'м' , 'е' , 'л' , 'э' , 'ю' ,
+                '0' , '1' , ' ' , 'в' , 'и' , 'с' , 'с' , 'а' , 'м' , ' ' , 'и' , 'н' , 'л' , 'о' , 'п' , 'а' , 'з' ,
+                ' ' , '2' , 'е' , 'и' , 'н' , 'а' , 'д' , 'а' , 'з' , ' ' , 'и' , 'ч' , 'а' , 'н' , 'о' , 'б' , 'и' , 'ф' ,
+                ' ' , 'и' , 'м' , 'а' , 'л' , 'с' , 'и' , 'ч' , ' ' , 'в' , 'и' , 'с' , 'с' , 'а' , 'м' , ' ' , 'и' , 'н' , 'л' , 'о' ,
+                'п' , 'а' , 'З' , ' ' , 'е' , 'о' , 'в' , 'р' , 'е' , 'п' , ' ' , 'е' , 'и' , 'н' , 'а' , 'д' , 'а' , 'З'
+        };
+        for (int i = massChar.length - 1; i >= -1; i--) {
+            System.out.print(massChar[i]);
+        }
+    }
+}
\ No newline at end of file
Index: src/lesson4/HomeWork/Fibonachi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/HomeWork/Fibonachi.java b/src/lesson4/HomeWork/Fibonachi.java
new file mode 100644
--- /dev/null	(date 1643717622180)
+++ b/src/lesson4/HomeWork/Fibonachi.java	(date 1643717622180)
@@ -0,0 +1,34 @@
+package lesson4.HomeWork;
+
+public class Fibonachi {
+    public static void main(String[] args) {
+
+
+        int[] intArray = {2, 3, 4, 5, 6, 7, 8, 9, 10};
+        int maxNum = intArray[0];
+
+        for (int j : intArray) {
+            if (j > maxNum)
+                maxNum = j;
+        }
+        System.out.println("Maximum number = " + maxNum);
+
+
+        int result = 0;
+        for (int m : intArray) {
+            result += m;
+        }
+        System.out.println("Среднее арифмитическое = " + result / intArray.length);
+
+            // число фиббоначе
+        int[] fibonachi = new int[10];
+        for (int i = 0; i < fibonachi.length; i++) {
+            if (i < 2) fibonachi[i] = 1;
+            else fibonachi[i] = fibonachi[ i-1] + fibonachi[i-2];
+            System.out.print(fibonachi[i] + " ");
+        }
+    }
+
+
+}
+
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1643717622536)
+++ b/.idea/uiDesigner.xml	(date 1643717622536)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/lesson5/MetodUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/MetodUtils.java b/src/lesson5/MetodUtils.java
new file mode 100644
--- /dev/null	(date 1644916445907)
+++ b/src/lesson5/MetodUtils.java	(date 1644916445907)
@@ -0,0 +1,20 @@
+package lesson5;
+
+public class MetodUtils {
+    public static void main(String[] args) {
+        sum(3,3,3); System.out.println(sum(4,4,4));
+        print();
+
+
+    }
+
+    static void print() {
+        System.out.println(" число >>>>>");
+    }
+
+    static int sum(int a1, int b1, int c1) {
+        int summa = 0;
+        return summa = a1 + b1 + c1;
+    }
+
+}
Index: src/lesson5/MethodsUtils2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/MethodsUtils2.java b/src/lesson5/MethodsUtils2.java
new file mode 100644
--- /dev/null	(date 1644916445917)
+++ b/src/lesson5/MethodsUtils2.java	(date 1644916445917)
@@ -0,0 +1,20 @@
+package lesson5;
+
+public class MethodsUtils2 {
+    public static void main(String[] args) {
+        double sredneeArif = sredneeArif(25,24,23);
+        System.out.println(sredneeArif);
+        System.out.println(summa(3,4,5));
+
+    }
+
+    static int summa(int a1, int b1, int c1) {
+
+        return a1 + b1 + c1;
+    }
+
+    static double sredneeArif(int a,int b, int c){
+        double sum = summa(a,b,c);
+        return sum/3;
+    }
+}
Index: src/lesson5/MethodsArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/MethodsArray.java b/src/lesson5/MethodsArray.java
new file mode 100644
--- /dev/null	(date 1644916445922)
+++ b/src/lesson5/MethodsArray.java	(date 1644916445922)
@@ -0,0 +1,36 @@
+package lesson5;
+
+public class MethodsArray {
+    public static void main(String[] args) {
+
+        int[] array = {22, 33, 44, 55, 66};
+        remove(array, 44);
+        int[] newMass = remove(array, 44);
+        for (int i = 0; i < newMass.length - 1; i++) {
+            System.out.print(newMass[i] + " ");
+        }
+
+    }
+
+
+    static int[] remove(int[] arr, int del) {
+        if (arr == null) {
+            return arr;
+        }
+        int count = 0;
+        for (int i = 0; i < arr.length; i++) {
+            if (arr[i] == del) {
+                count++;
+            } else {
+                arr[i - count] = arr[i];
+            }
+        }
+
+        int[] newArray = new int[arr.length - count];
+        for (int i = 0; i < newArray.length; i++) {
+            newArray[i] = arr[i];
+        }
+        return newArray;
+
+    }
+}
Index: src/Lesson10/Lesson10PracticaInterface/Sapogi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Sapogi.java b/src/Lesson10/Lesson10PracticaInterface/Sapogi.java
new file mode 100644
--- /dev/null	(date 1645189140934)
+++ b/src/Lesson10/Lesson10PracticaInterface/Sapogi.java	(date 1645189140934)
@@ -0,0 +1,24 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Sapogi extends Obuv implements ObuvFOFIx{
+
+    @Override
+    public String sole() {
+        return null;
+    }
+
+    @Override
+    public String kindOfMaterial() {
+        return null;
+    }
+
+    @Override
+    public int condition() {
+        return 0;
+    }
+
+    @Override
+    public void pochinit() {
+        System.out.println("мы чиним сапоги");
+    }
+}
Index: src/lesson5/HomeWork/DefinesPolindrom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/HomeWork/DefinesPolindrom.java b/src/lesson5/HomeWork/DefinesPolindrom.java
new file mode 100644
--- /dev/null	(date 1644916445889)
+++ b/src/lesson5/HomeWork/DefinesPolindrom.java	(date 1644916445889)
@@ -0,0 +1,44 @@
+package lesson5.HomeWork;
+
+public class DefinesPolindrom {
+    public static void main(String[] args) {
+
+
+        System.out.println(isPalidrome(22322));
+    }
+
+
+    static boolean isPalidrome(int numbers) {
+        int number = numbers;
+        int count =  0;
+        while (number != 0) {
+            count++;
+            number /= 10;
+        }
+
+        int[] array = new int[count];
+        for (int i = array.length - 1; i >= 0; i--) ;
+        {
+            array[count] = numbers % 10;
+            numbers /= 10;
+        }
+
+        boolean isPalidrome = false;
+
+        for (int i = 0, j = array.length - 1; i < array.length; i++, j--) {
+            if (array[i] != array[j]) {
+                isPalidrome = false;
+            } else {
+                isPalidrome = true;
+            }
+        }
+        if (isPalidrome) {
+            return true;
+        } else {
+            return false;
+        }
+
+    }
+
+}
+
Index: src/lesson11/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson11/Student.java b/src/lesson11/Student.java
new file mode 100644
--- /dev/null	(date 1644940876233)
+++ b/src/lesson11/Student.java	(date 1644940876233)
@@ -0,0 +1,53 @@
+package lesson11;
+
+public class Student {
+    private String name;
+    private int age;
+    private boolean gender;
+
+    public Student() {
+    }
+
+    public Student(String name, int age, boolean gender) {
+        this.name = name;
+        this.age = age;
+        this.gender = gender;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public boolean isGender() {
+        return gender;
+    }
+
+    public void setGender(boolean gender) {
+        this.gender = gender;
+    }
+
+    //        public void printToConsole(){
+//            System.out.println(name + " , " + age + ", " + gender);
+//        }
+    public void printToConsole(){
+        System.out.println(name);
+    }
+}
+
+
+
+
+
+
Index: src/lesson11/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson11/Main.java b/src/lesson11/Main.java
new file mode 100644
--- /dev/null	(date 1644940922994)
+++ b/src/lesson11/Main.java	(date 1644940922994)
@@ -0,0 +1,28 @@
+package lesson11;
+
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class Main {
+    public static void main(String[] args) {
+        HashMap<String,Integer>tournirTable = new HashMap<>();
+        tournirTable.put("динамо",5);
+        tournirTable.put("спартак",4);
+        tournirTable.put("шахнет",3);
+        tournirTable.put("динамо",7);
+        System.out.println(tournirTable);
+
+        for(Map.Entry<String,Integer>comanda:tournirTable.entrySet()){
+            System.out.println(comanda.getKey());
+            System.out.println(comanda.getValue());
+        }
+
+        // это второй такой же метод
+//        for(String key:tournirTable.keySet()){
+//            System.out.println(key);
+//            System.out.println(tournirTable.get(key));
+//        }
+    }
+}
+
Index: src/Lesson6/TestMainString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/TestMainString.java b/src/Lesson6/TestMainString.java
new file mode 100644
--- /dev/null	(date 1643888995274)
+++ b/src/Lesson6/TestMainString.java	(date 1643888995274)
@@ -0,0 +1,38 @@
+package Lesson6;
+
+public class TestMainString {
+    public static void main(String[] args) {
+        String name ="Dima Hello";
+        String name2="Dima Hello";
+        System.out.println(name.charAt(0));
+        System.out.println(name.length());
+        System.out.println(name.endsWith(".zip"));
+        System.out.println(name.startsWith("D"));
+        System.out.println(name.split(" H"));
+
+
+        System.out.println("1-ое случайное число: " + Math.random());
+        System.out.println("2-ое случайное число: " + Math.random());
+        System.out.println("3-е случайное число: " + Math.random());
+
+        System.out.println(name.trim());
+        System.out.println("    ");
+        System.out.println(name2.equals(name));
+
+
+
+//
+//        String s1 = new String("hello");
+//        String s2 = new String("hello");
+//        System.out.println(s1 == s2);// false
+//        System.out.println(s1.equals(s2));// true
+//        String s3 = new String("hello");
+//        String s4 = "hello";
+//        System.out.println(s3 == s4);// false
+//        System.out.println(s3.equals(s4));// true
+//        String s5 = "hello";
+//        String s6 = "hello";
+//        System.out.println(s5 == s6);// true
+//        System.out.println(s5.equals(s6));// true
+    }
+}
Index: src/lesson11/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson11/Main1.java b/src/lesson11/Main1.java
new file mode 100644
--- /dev/null	(date 1644941803122)
+++ b/src/lesson11/Main1.java	(date 1644941803122)
@@ -0,0 +1,13 @@
+package lesson11;
+
+import javax.swing.*;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class Main1 {
+    public static void main(String[] args) {
+        Universitet universitet = new Universitet();
+
+    }
+}
Index: src/lesson11/Universitet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson11/Universitet.java b/src/lesson11/Universitet.java
new file mode 100644
--- /dev/null	(date 1644941351761)
+++ b/src/lesson11/Universitet.java	(date 1644941351761)
@@ -0,0 +1,9 @@
+package lesson11;
+
+
+import javax.swing.*;
+import java.util.ArrayList;
+
+public class Universitet {
+
+}
Index: src/lesson5/HomeWork/CurrenncyConvektor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/HomeWork/CurrenncyConvektor.java b/src/lesson5/HomeWork/CurrenncyConvektor.java
new file mode 100644
--- /dev/null	(date 1644916445898)
+++ b/src/lesson5/HomeWork/CurrenncyConvektor.java	(date 1644916445898)
@@ -0,0 +1,33 @@
+package lesson5.HomeWork;
+
+public class CurrenncyConvektor {
+    public static void main(String[] args) {
+
+        double d = currenncyConvektor(1000,'$');
+        System.out.println(d);
+
+    }
+
+    // мини ковектор валют
+     static double currenncyConvektor(double a,char c){
+        char EUR ='%';
+        char USD = '$';
+        char GBR = '&';
+        double curceEuro = 82.65;
+        double curceDollar = 71.29;
+        double curceFunt = 95.65;
+        double request = 0;
+
+        if(c==EUR){
+            request = a/curceDollar;
+        }else if(c==USD){
+            request = a/curceEuro;
+        }else if(c==GBR){
+            request=a/curceFunt;
+        }else{
+            System.out.println("Неизветсная валюта");
+        }
+        return request;
+    }
+
+}
Index: src/Lesson10/Lesson10PracticaInterface/Tufli.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Tufli.java b/src/Lesson10/Lesson10PracticaInterface/Tufli.java
new file mode 100644
--- /dev/null	(date 1645189378398)
+++ b/src/Lesson10/Lesson10PracticaInterface/Tufli.java	(date 1645189378398)
@@ -0,0 +1,27 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Tufli extends Obuv implements ObuvFOFIx{
+
+    private String kindOfMaterial;
+
+
+    @Override
+    public void pochinit(){
+        System.out.println("мы чиним туфли");
+    }
+
+    @Override
+    public String sole() {
+        return null;
+    }
+
+    @Override
+    public String kindOfMaterial() {
+        return kindOfMaterial;
+    }
+
+    @Override
+    public int condition() {
+        return 0;
+    }
+}
Index: src/Lesson7/People.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/People.java b/src/Lesson7/People.java
new file mode 100644
--- /dev/null	(date 1645000312467)
+++ b/src/Lesson7/People.java	(date 1645000312467)
@@ -0,0 +1,14 @@
+package Lesson7;
+
+
+
+public class People {
+    public int age;
+    public String name;
+
+
+    void printInfo() {
+        System.out.println(" Name " + name + " age " + age);
+    }
+
+}
Index: src/lesson4/lesson4/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/lesson4/Main.java b/src/lesson4/lesson4/Main.java
new file mode 100644
--- /dev/null	(date 1644941402649)
+++ b/src/lesson4/lesson4/Main.java	(date 1644941402649)
@@ -0,0 +1,43 @@
+package lesson4.lesson4;
+
+public class Main {
+    public static void main(String[] args) {
+        // всегда 2 варианта после =
+//        String text = new String();// это перввй вариант
+//        String text1 = "Hello World";// это второй вариант
+
+        String password = "qWer111ty";
+        int paswordLength = password.length();
+
+        if (paswordLength < 8 ){
+            System.out.println("пароль слишком коротокий");
+            return;//  остановить метод который сейчас выполняется
+
+        }
+        // contains проверяет содержит ли цифра или символ или нет
+        if(!password.contains("0")&& !password.contains("1")
+                && !password.contains("1")
+                && !password.contains("2")
+                && !password.contains("3")
+                && !password.contains("4")
+                && !password.contains("5")
+                && !password.contains("6")
+                && !password.contains("7")
+                && !password.contains("8")
+                && !password.contains("9")){
+            System.out.println("в пароли нет цифры ");
+            return;
+        }
+        // toUpperCase делает заглавные буквы
+        String alfabet = "abcdefghijklmnopqrstuvwxyz".toUpperCase();
+
+        for(int i = 0 ;i< alfabet.length();i++){
+            char currentCharFromAlfabet =  alfabet.charAt(i);
+            if (password.contains(currentCharFromAlfabet+"")){
+                System.out.println("Этог ббольшая буква " +currentCharFromAlfabet);
+            }
+        }
+    }
+}
+// for (int currentNum : num) // for each  для каждого числа цикл
+
Index: src/lesson4/lesson4/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/lesson4/Main2.java b/src/lesson4/lesson4/Main2.java
new file mode 100644
--- /dev/null	(date 1644941402645)
+++ b/src/lesson4/lesson4/Main2.java	(date 1644941402645)
@@ -0,0 +1,17 @@
+package lesson4.lesson4;
+
+public class Main2 {
+    public static void main(String[] args) {
+        String email = "sdknd@c.com";
+        //split режет массив
+        String[] partOfEmail =  email.split("@");
+        if(partOfEmail.length !=2){
+            System.out.println("Здесь не одна собачка или ее вообще ее нет ");
+            return;// чтоб дальше проверок не было
+        } // fn f4 посмотреть функционал
+        if (email.startsWith(".")||email.endsWith(".")){
+
+        }
+    }
+}
+
Index: src/lesson4/lesson4/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/lesson4/Main3.java b/src/lesson4/lesson4/Main3.java
new file mode 100644
--- /dev/null	(date 1644941441042)
+++ b/src/lesson4/lesson4/Main3.java	(date 1644941441042)
@@ -0,0 +1,60 @@
+package lesson4.lesson4;
+
+import java.util.Scanner;
+
+public class Main3 {
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+
+        System.out.println("какую фигуру по считаем ?");
+        System.out.println("1 - квадрат");
+        System.out.println("2- треугольник ");
+        System.out.println("3 - круг");
+        System.out.println("4 -овал");
+        System.out.println("5 - паралелелограм");
+
+        String figura = scanner.nextLine();
+
+        System.out.println("что посчитать ?");
+        System.out.println("1 - площадь");
+        System.out.println("2 - периметр");
+
+        String action = scanner.nextLine();
+
+
+        if (figura.equalsIgnoreCase("квадрат") || figura.equals("1")) {
+
+            System.out.println("введите в сторону квадрата ");
+            String storona = scanner.nextLine();
+            int a = Integer.parseInt(storona);
+
+            if (action.equalsIgnoreCase("площадь") || action.equals("1")) {
+                System.out.println("площадь квадрата " + (a * a));
+            } else {
+                System.out.println("периметр квадрата " + (a * 4));
+            }
+
+            if (figura.equalsIgnoreCase("треугольник") || figura.equals("2\n" +
+                    "            if (action.equalsIgnoreCase(\"площадь\") || action.equals()) {\n" +
+                    "                System.out.println(\"площадь квадрата \" + (a * a));\n" +
+                    "            } else {\n" +
+                    "                System.out.println(\"периметр квадрата \" + (a * 4));")) {
+
+
+            }
+            if (figura.equalsIgnoreCase("круг") || figura.equals("3")) {
+
+
+            }
+            if (figura.equalsIgnoreCase("овал") || figura.equals("4")) {
+
+
+            }
+            if (figura.equalsIgnoreCase("паралелепипод") || figura.equals("5")) {
+
+
+            }
+            //System.out.println(figura);
+        }
+    }
+}
Index: src/Lesson6/HWMetod/Metods.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/HWMetod/Metods.java b/src/Lesson6/HWMetod/Metods.java
new file mode 100644
--- /dev/null	(date 1644396092519)
+++ b/src/Lesson6/HWMetod/Metods.java	(date 1644396092519)
@@ -0,0 +1,90 @@
+package Lesson6.HWMetod;
+
+import java.util.Arrays;
+
+public class Metods {
+    public static void main(String[] args) {
+        String[] Photo = {"image.png", "image.jpg", "image.jpeg", "image.png"};
+        String stroka = "Ниже посмотрите будет рассмотрен пример иллюстрирующий синтаксис ";
+
+        int result = numberLine(stroka);
+        System.out.println(result);
+
+        String test = replaces(stroka);
+        System.out.println(test);
+
+        String[] string1 = photoExtensions(Photo);
+        System.out.println(Arrays.toString(string1));
+
+    }
+
+    // считает количество слов в строке
+    static int numberLine(String line) {
+        int count = 0;
+        if (line == null) {
+            System.out.println("Нету слов в строке ");
+        }
+        for (int i = 0; i < line.length(); i++) {
+            if (line.charAt(i) == ' ') {
+                count++;
+            }
+        }
+        return count;
+    }
+
+    //метод меняет О на А
+    static String replaces(String repl) {
+        String s = null;
+        int count = 0;
+        for (int i = 0; i < repl.length(); i++) {
+            s = repl.replaceAll("о", "a");
+            count++;
+        }
+        return s;
+    }
+
+    public static String[] photoExtensions(String[] array) {
+        int countPng = 0;
+        int countJpg = 0;
+        int countJpeg = 0;
+        String[] resultArray = null;
+        for (int i = 0; i < array.length; i++) {
+            if (array[i].endsWith("png")) {
+                countPng++;
+            } else if (array[i].endsWith("jpg")) {
+                countJpg++;
+            } else if (array[i].endsWith("jpeg")) {
+                countJpeg++;
+            }
+        }
+        String[] arrJpeg = new String[countJpeg];
+        String[] arrJpg = new String[countJpg];
+        String[] arrPng = new String[countPng];
+
+        // здесь проверка сравнения каунтовых переменных
+        for (int i = 0, j = 0; i < array.length; i++) {
+            if (countPng > countJpeg && countPng > countJpg) {
+                if (array[i].endsWith(".png")) {
+                    arrPng[j] = array[i];
+                    resultArray = arrPng;
+                    j++;
+                } else if (countJpg > countPng && countJpg > countJpeg) {
+                    if (array[i].endsWith(".jpg")) {
+                        arrJpg[j] = array[i];
+                        resultArray = arrJpg;
+                        j++;
+                    } else if (countJpeg > countJpg && countJpeg > countPng) {
+                        if (array[i].endsWith(".jpeg")) {
+                            arrJpeg[j] = array[i];
+                            resultArray = arrJpeg;
+                            j++;
+                        }
+                    }
+                }
+            }
+        }
+        return resultArray;
+    }
+
+
+}
Index: src/lesson3/lesson3/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/lesson3/Main.java b/src/lesson3/lesson3/Main.java
new file mode 100644
--- /dev/null	(date 1644941525058)
+++ b/src/lesson3/lesson3/Main.java	(date 1644941525058)
@@ -0,0 +1,29 @@
+package lesson3.lesson3;
+
+public class Main {
+    public static void main(String[] args) {
+//        int[] numbers = {1, 2, 3, 4,5,6};
+//        numbers[3]=33;
+//        System.out.println(numbers[2]);
+//        int[] nums2=new int[6];// нужно указывать длинну
+
+//        int[] numbers = {1, 2, 3, 4, 5, 6};// numbers.length размер длинны выберает автоматически
+//        for (int i = 0; i < numbers.length; i++) {
+//            System.out.println(numbers[i]);
+//        }
+        // вывести с конца в начало через одну
+
+//        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+//        for (int i = numbers.length - 1; i >= 0; i = i - 2) {
+//            System.out.println(numbers[i]);
+//        }
+
+
+        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+        for (int i = numbers.length - 1; i >= 0;  i --) {
+            if(numbers[i]%2!=0)
+                System.out.println(numbers[i]);
+
+        }
+    }
+}
Index: src/lesson3/lesson3/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/lesson3/Main1.java b/src/lesson3/lesson3/Main1.java
new file mode 100644
--- /dev/null	(date 1644941544322)
+++ b/src/lesson3/lesson3/Main1.java	(date 1644941544322)
@@ -0,0 +1,33 @@
+package lesson3.lesson3;
+
+public class Main1 {
+    public static void main(String[] args) {
+//        int money = 100000;
+//        int rate = 7;
+//        int years = 9;
+//
+//        for(int year= 0;year < years;years++){
+//            for(int month=0;month<12;month++){
+//                money=money+((money/100*rate)/12);
+//                System.out.println(money);
+//            }
+//        }
+
+        int [] numbers = new int [7];
+        int value = 0;
+        for(int i = 0;i < numbers.length;i++){
+//            numbers[0]=10;
+//            numbers[1]=12;
+//            numbers[2]=14;
+//            numbers[3]=16;
+//            numbers[4]=18;
+//            numbers[5]=20;
+//            numbers[6]=22;
+            numbers[i]=value;
+            value = value +2;
+
+            System.out.println(value);
+        }
+
+    }
+}
Index: src/lesson3/lesson3/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/lesson3/Main2.java b/src/lesson3/lesson3/Main2.java
new file mode 100644
--- /dev/null	(date 1644941583186)
+++ b/src/lesson3/lesson3/Main2.java	(date 1644941583186)
@@ -0,0 +1,21 @@
+package lesson3.lesson3;
+import static java.lang.System.out;
+
+
+public class Main2 {
+    public static void main(String[] args) throws InterruptedException {
+        for (int day = 0; day < 365; day++) {
+            for (int hour = 0; hour < 24; hour++) {
+                for (int minut = 0; minut < 60; minut++) {
+                    for (int second = 0; second < 60; second++) {
+                        out.printf ("со дня прошло:%d дня ,%d часа ,%d минут,%d секунд.\n", day,hour,minut,second);
+                        Thread.sleep(1000);
+
+                    }
+                }
+            }
+        }
+    }
+}
+//System.out.println("со дня прошло:%d дня ,%d часа ,%d минут,%d секунд.\n", day, hour,
+
Index: src/lesson3/lesson3/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/lesson3/Main3.java b/src/lesson3/lesson3/Main3.java
new file mode 100644
--- /dev/null	(date 1644941606812)
+++ b/src/lesson3/lesson3/Main3.java	(date 1644941606812)
@@ -0,0 +1,13 @@
+package lesson3.lesson3;
+
+public class Main3 {
+    public static void main(String[] args) {
+        String name = "Alex";
+        char[] simvols = name.toCharArray();// команда массимов символов
+        for ( int i = 0; i < simvols.length;i++){
+            if(simvols[i]=='a'||simvols[i]== 'o'|| simvols[i]=='e'){
+                System.out.println(simvols[i]);
+            }
+        }
+    }
+}
Index: src/lesson2/lesson2/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/lesson2/Main.java b/src/lesson2/lesson2/Main.java
new file mode 100644
--- /dev/null	(date 1644941659234)
+++ b/src/lesson2/lesson2/Main.java	(date 1644941659234)
@@ -0,0 +1,28 @@
+package lesson2.lesson2;
+
+public class Main {
+    public static void main(String[] args) {
+
+
+        //упаравляющая конструкция if else
+        // 8й примитивный тип bool(true/false)
+        // boolean x = 5>8;
+        // логические операторы (< , > , <= , >= , ==, != )
+        // математические операторы ( + , - , * , / ,)
+        // обьедение выражение (||- или, &&- и)
+
+        int a = 7;
+        int b = 6;
+        int c = 5;
+
+        if (a == b && b == c && c == a) {
+            System.out.println("это раВностороний треугольник ");
+        }
+        else if (a != b && b != c && c != a) {
+            System.out.println("это раЗностороний треугольник ");
+        } else if ((a == b && b != c && c != a) || (a != b && b == c && c != a) || (a != b && b != c && c == a))
+            System.out.println("это равнобедренный треугольник");
+
+
+    }
+}
Index: src/lesson2/lesson2/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/lesson2/Main1.java b/src/lesson2/lesson2/Main1.java
new file mode 100644
--- /dev/null	(date 1644941673362)
+++ b/src/lesson2/lesson2/Main1.java	(date 1644941673362)
@@ -0,0 +1,24 @@
+package lesson2.lesson2;
+
+public class Main1 {
+    public static void main(String[] args) {
+        int mark = 3;
+        switch (mark) {
+            case 5:
+                System.out.println("отлично");
+                break;
+            case 4:
+                System.out.println("хорошо");
+                break;
+            case 3:
+                System.out.println("не плохо");
+                break;
+            case 2:
+                System.out.println("плохо");
+                break;
+            default:
+                System.out.println("это не оценка");
+
+        }
+    }
+}
Index: src/lesson2/lesson2/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/lesson2/Main2.java b/src/lesson2/lesson2/Main2.java
new file mode 100644
--- /dev/null	(date 1644941698102)
+++ b/src/lesson2/lesson2/Main2.java	(date 1644941698102)
@@ -0,0 +1,22 @@
+package lesson2.lesson2;
+
+public class Main2 {
+    public static void main(String[] args) {
+
+//        int number = 7;
+//        if(number % 2==0 ){
+//            System.out.println("это четное число");
+//        } else{
+//            System.out.println("это не четное число");
+//        }
+
+
+
+//        System.out.println(0.0/0.0);// не число   NaN
+//        System.out.println(12/0.0);// infinity бесконечность
+
+
+        String text = "hello";
+        System.out.println(text);
+    }
+}
Index: src/lesson2/lesson2/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/lesson2/Main3.java b/src/lesson2/lesson2/Main3.java
new file mode 100644
--- /dev/null	(date 1644941715586)
+++ b/src/lesson2/lesson2/Main3.java	(date 1644941715586)
@@ -0,0 +1,15 @@
+package lesson2.lesson2;
+
+public class Main3 {
+    public static void main(String[] args) {
+
+        // циклы for , for each , while
+        // for (1 блок со скольки  ,2 блок до скольки  , 3 блок , тело)
+        for (int i= 0;i < 5 ;i++) {
+
+            System.out.println("hello world");
+
+        }
+        System.out.println("все");
+    }
+}
Index: src/lesson2/lesson2/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/lesson2/Main4.java b/src/lesson2/lesson2/Main4.java
new file mode 100644
--- /dev/null	(date 1644941803129)
+++ b/src/lesson2/lesson2/Main4.java	(date 1644941803129)
@@ -0,0 +1,12 @@
+package lesson2.lesson2;
+
+public class Main4 {
+    public static void main(String[] args) {
+        for (int i = 20; i <= 40; i++) {
+            if (i % 2 == 0)
+
+                System.out.println(i);
+
+        }
+    }
+}
Index: src/lesson5/lesson5/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/lesson5/Main.java b/src/lesson5/lesson5/Main.java
new file mode 100644
--- /dev/null	(date 1644941896449)
+++ b/src/lesson5/lesson5/Main.java	(date 1644941896449)
@@ -0,0 +1,41 @@
+package lesson5.lesson5;
+
+public class Main {
+    public static void main(String[] args) {
+        int [][] nums = new int [4][5];
+       /* System.out.print(nums[0][0] + " ");
+        System.out.print(nums[0][1] + " ");
+        System.out.print(nums[0][2] + " ");
+        System.out.print(nums[0][3] + " ");
+        System.out.print(nums[0][4] + " ");
+        System.out.println();
+
+        System.out.print(nums[1][0] + " ");
+        System.out.print(nums[1][1] + " ");
+        System.out.print(nums[1][2] + " ");
+        System.out.print(nums[1][3] + " ");
+        System.out.print(nums[1][4] + " ");
+        System.out.println();
+
+        System.out.print(nums[2][0] + " ");
+        System.out.print(nums[2][1] + " ");
+        System.out.print(nums[2][2] + " ");
+        System.out.print(nums[2][3] + " ");
+        System.out.print(nums[2][4] + " ");
+        System.out.println();
+
+        System.out.print(nums[3][0] + " ");
+        System.out.print(nums[3][1] + " ");
+        System.out.print(nums[3][2] + " ");
+        System.out.print(nums[3][3] + " ");
+        System.out.print(nums[3][4] + " ");
+        System.out.println();*/
+
+        for(int i = 0; i < nums.length; i++) {
+            for(int j = 0; j < nums[i].length; j++) { //массив крутит по строке
+                System.out.print(nums[i][j] + " ");
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/lesson5/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/lesson5/Main1.java b/src/lesson5/lesson5/Main1.java
new file mode 100644
--- /dev/null	(date 1644999646535)
+++ b/src/lesson5/lesson5/Main1.java	(date 1644999646535)
@@ -0,0 +1,20 @@
+package lesson5.lesson5;
+
+public class Main1 {
+    public static void main(String[] args) {
+        int[][] nums = {{2, 4, 5, 6},
+                        {4, 2, 3, 5},
+                        {5, 3, 4, 5,9},
+                        {3, 5, 7, 8}};
+        for (int i = 0; i < nums.length; i++) {
+            for (int j = 0; j < nums[i].length; j++) {
+                if (nums[i][j] % 2 == 0) {
+                    System.out.print(nums[i][j] + " ");
+                } else {
+                    System.out.print(" " + " ");
+                }
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/lesson5/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/lesson5/Main2.java b/src/lesson5/lesson5/Main2.java
new file mode 100644
--- /dev/null	(date 1644999550692)
+++ b/src/lesson5/lesson5/Main2.java	(date 1644999550692)
@@ -0,0 +1,44 @@
+package lesson5.lesson5;
+
+public class Main2 {
+    public static void main(String[] args) {
+        boolean [][] scheduled = new boolean[7][7];
+        ScheduledUtils.reserve(scheduled, "Пн", 3);
+        ScheduledUtils.reserve(scheduled, "Вт", 1);
+        ScheduledUtils.reserve(scheduled, "Вт", 0);
+        ScheduledUtils.reserve(scheduled, "Чт", 4);
+
+       /* scheduled[0][0] = true;
+        scheduled[2][3] = true;
+        scheduled[3][6] = true;
+        scheduled[4][0] = true;
+        scheduled[5][3] = true;*/
+        System.out.println("        пн     вт     ср     чт     пт     сб     вс");
+
+        for( int i = 0; i < scheduled.length; i ++) {
+            System.out.print((i+9)+"-" +(i +10) + " ");
+            for (int j = 0; j < scheduled[i].length; j++) {
+                if(scheduled[i][j]){
+                    System.out.print("занято ");
+                }
+                else {
+                    System.out.print("   -   ");
+                }
+            }
+            System.out.println();
+        }
+
+    }
+    //формула создания метода
+    //1 - модификатор доступа (одно из 4-х слов)
+    /* public - виден внутри всего проекта
+     * ________ - виден внутри текущей папки
+     * protected - виден внутри текущей папки и внутри дочерним классам
+     * private - виден только внутри текущего класса
+     * 2 - static (есть или нет)
+     * 3 - возвращаемый тип (int, String, void - если ничего не ожидаю)
+     * 4 - название метода(максимально понятно)
+     * 5 - входящие параметры в круглых скобках через запятую с указанием типа (int a, int b, int c)
+     * 6 - тело метода, то что будет происходить при вызове метода
+     */
+}
Index: src/lesson5/lesson5/ScheduledUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/lesson5/ScheduledUtils.java b/src/lesson5/lesson5/ScheduledUtils.java
new file mode 100644
--- /dev/null	(date 1644941974657)
+++ b/src/lesson5/lesson5/ScheduledUtils.java	(date 1644941974657)
@@ -0,0 +1,38 @@
+package lesson5.lesson5;
+
+public class ScheduledUtils {
+    public static void reserve(boolean[][] scheduled, String day, int time) {
+        int dayIndex = -1;
+        if (day.equals("Пн")) {
+            dayIndex = 0;
+        }
+        if (day.equals("Вт")) {
+            dayIndex = 1;
+        }
+        if (day.equals("Ср")) {
+            dayIndex = 2;
+        }
+        if (day.equals("Чт")) {
+            dayIndex = 3;
+        }
+        if (day.equals("Пт")) {
+            dayIndex = 4;
+        }
+        if (day.equals("Сб")) {
+            dayIndex = 5;
+        }
+        if (day.equals("Вс")) {
+            dayIndex = 6;
+        }
+        if(dayIndex == -1) {
+            System.out.println("Такого дня не существует");
+            return;
+        }
+        if (scheduled[time][dayIndex] == true) {
+            System.out.println("Время бронирования - ЗАНЯТО");
+        } else {
+            scheduled[time][dayIndex] = true;
+            System.out.println("Успешно забронировано!!!");
+        }
+    }
+}
Index: src/lesson2/HomeWork/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/HomeWork/Main.java b/src/lesson2/HomeWork/Main.java
new file mode 100644
--- /dev/null	(date 1644942156365)
+++ b/src/lesson2/HomeWork/Main.java	(date 1644942156365)
@@ -0,0 +1,45 @@
+package lesson2.HomeWork;
+
+public class Main {
+
+    public static void main(String[] args) {
+        //все нечетные цифры от 7 до 30
+        for (int i = 7; i <= 30; i++) {
+            if (i % 2 == 1)
+
+                System.out.println(i);
+
+        }
+        System.out.println("   ");
+        // от 30 до 0
+        for (int i = 30; i >= 0; i--) {
+            if (i % 2 == 1)
+
+                System.out.println(i);
+
+        }
+        System.out.println("   ");
+        // от 40 до 100 которые делятся на 3 и на 5
+        for (int i = 40; i <= 100; i++) {
+            if (i % 3 == 0 && i % 5 == 0)
+                System.out.println(i);
+        }
+        System.out.println("   ");
+        // сумму цифр от 1 до 10
+        for (int i = 1; i <= 10; i++) {
+            i=10 * (10 + 1) / 2;
+            System.out.println(i);
+        }
+
+        System.out.println("   ");
+        // сумму четных чисел от 100 до 150
+        int count= 0;
+        for (int i = 100; i <= 150; i++) {
+            if (i % 2 == 0) {
+                count += i;
+            }
+
+
+        } System.out.println(count);
+    }
+}
Index: src/lesson3/HomeWork/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/HomeWork/Main.java b/src/lesson3/HomeWork/Main.java
new file mode 100644
--- /dev/null	(date 1647102753637)
+++ b/src/lesson3/HomeWork/Main.java	(date 1647102753637)
@@ -0,0 +1,25 @@
+package lesson3.HomeWork;
+
+public class Main {
+    public static void main(String[] args) {
+        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+        int shift = 0;
+        for (int i = 0; i < numbers.length; i++) {
+            for (int n = 0; n < numbers.length; n++) {
+                // убираем первый элемент в буфер, а на его место ставим хвостовой элемент
+                int buffer = numbers[0];
+                numbers[0] = numbers[numbers.length - 1];
+
+                // циклично сдвигаем весь массив
+                for (int j = 1; j < numbers.length - 1; j++) {
+                    numbers[numbers.length - j] = numbers[numbers.length - j - 1];
+                }
+
+                // ставим буферный элемент в 1 ячейку
+                numbers[1] = buffer;
+              //  System.out.print(numbers[i]);
+            }
+            System.out.print(numbers[i]);
+        }
+    }
+}
Index: src/lesson14HashMap/SimpleCache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/SimpleCache.java b/src/lesson14HashMap/SimpleCache.java
new file mode 100644
--- /dev/null	(date 1647258769730)
+++ b/src/lesson14HashMap/SimpleCache.java	(date 1647258769730)
@@ -0,0 +1,20 @@
+package lesson14HashMap;
+
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.Map;
+
+public class SimpleCache<K,V> extends LinkedHashMap {
+    private final int CAPACITY;
+
+    public SimpleCache(int capacity) {
+        super(capacity + 1,1.1f,true);
+        this.CAPACITY = capacity;
+    }
+
+    @Override
+    protected boolean removeEldestEntry(Map.Entry eldest) {
+        return this.size() > CAPACITY;
+    }
+
+}
Index: src/lesson3/HomeWork/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/HomeWork/Main1.java b/src/lesson3/HomeWork/Main1.java
new file mode 100644
--- /dev/null	(date 1644942210274)
+++ b/src/lesson3/HomeWork/Main1.java	(date 1644942210274)
@@ -0,0 +1,62 @@
+package lesson3.HomeWork;
+
+public class Main1 {
+    public static void main(String[] args) {
+        // sum of all cells # 1
+
+
+//        int sum = 0;
+//        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+//        for (int i = 0; i < numbers.length; i++) {
+//            sum = sum + numbers[i];
+//
+//        }
+//        System.out.print(sum);
+
+        // more even or odd numbers # 2
+
+//        int even = 0;
+//        int odd = 0;
+//        int[] numbers={1, 2, 3, 4, 5, 6, 7, 8, 9};
+//        for (int i = 0; i < numbers.length; i++) {
+//            if (numbers[i] % 2 == 0) {
+//                even = i;
+//            } else {
+//                odd = i;
+//            }
+//        }
+//
+//        if (even < odd) {
+//            System.out.print("четных больше");
+//        } else {
+//            System.out.print("нечетных больше");
+//        }
+
+        // the average of the array
+//        int sum = 0;
+//        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+//        for (int i = 0; i < numbers.length; i++) {
+//            sum += numbers[i];
+//        }
+//        System.out.println(sum/ numbers.length);
+
+        //
+
+        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+
+        int[] array = new int[numbers.length];
+        for (int i = numbers.length - 1; i >= 0; i--) {
+            if (i + 1 >= numbers.length) {
+                array[i + 1 - numbers.length] = numbers[i];
+            } else {
+                array[i + 1] = numbers[i];
+            }
+        }
+        for (int i : array) {
+            System.out.print(i);
+
+
+        }
+
+    }
+}
Index: src/lesson13/lesson13HomeWork/ListItils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/lesson13HomeWork/ListItils.java b/src/lesson13/lesson13HomeWork/ListItils.java
new file mode 100644
--- /dev/null	(date 1646723074647)
+++ b/src/lesson13/lesson13HomeWork/ListItils.java	(date 1646723074647)
@@ -0,0 +1,25 @@
+package lesson13.lesson13HomeWork;
+
+import java.util.List;
+import java.util.TreeSet;
+
+public interface ListItils {
+
+    /**
+     * Конвертирует переменное число параметров в список строк
+     *
+     * @param strings переменное число аргументов
+     * @return список строк
+     * @throws IllegalArgumentException если один из аргументов null
+     */
+    List<String> asList(String... strings) throws IllegalArgumentException;
+
+    /**
+     * Возвращает отсортированный список в обратном порядке (по убыванию)
+     * <b>Исходный список не должен быть изменен</b>
+     *
+     * @return отсортированный список по убыванию
+     * @throws IllegalArgumentException если data = null
+     */
+    TreeSet<String> sortedList() throws IllegalArgumentException;
+}
Index: src/lesson13/lesson13HomeWork/OfissPeopple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/lesson13HomeWork/OfissPeopple.java b/src/lesson13/lesson13HomeWork/OfissPeopple.java
new file mode 100644
--- /dev/null	(date 1646723074638)
+++ b/src/lesson13/lesson13HomeWork/OfissPeopple.java	(date 1646723074638)
@@ -0,0 +1,68 @@
+package lesson13.lesson13HomeWork;
+
+import lesson12.lesson12.Coin;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
+
+public class OfissPeopple implements Comparable<OfissPeopple>{
+
+    int age;
+    String name;
+
+    public OfissPeopple() {
+    }
+
+    public OfissPeopple(int age, String name) {
+        this.age = age;
+        this.name = name;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        OfissPeopple that = (OfissPeopple) o;
+        return age == that.age && Objects.equals(name, that.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(age, name);
+    }
+
+    @Override
+    public String toString() {
+        return "OfissPeopple{" +
+                "age=" + age +
+                ", name='" + name + '\'' +
+                '}';
+    }
+
+    @Override
+    public int compareTo(OfissPeopple o) {
+        if(this.getAge()!=o.getAge()){
+           return this.getAge()-o.age;
+        }
+        return this.getName().compareTo(o.name);
+    }
+
+}
Index: src/Lesson6/Interface/IMatrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/Interface/IMatrix.java b/src/Lesson6/Interface/IMatrix.java
new file mode 100644
--- /dev/null	(date 1644942372750)
+++ b/src/Lesson6/Interface/IMatrix.java	(date 1644942372750)
@@ -0,0 +1,161 @@
+package Lesson6.Interface;
+
+
+
+    /**
+     * Интерфейс работы с матрицами
+     *
+     * @author nedis
+     * @version 1.0
+     */
+    public interface IMatrix {
+
+        /**
+         * Размер матрицы для конструктора без параметров
+         */
+        int DEFAULT_MATRIX_SIZE = 1;
+
+        /**
+         * Возвращает количество строк матрицы
+         *
+         * @return количесвто строк матрицы
+         */
+        int getRows();
+
+        /**
+         * Возвращает количество столбцов матрицы
+         *
+         * @return количество столбцов матрицы
+         */
+        int getColumns();
+
+        /**
+         * Возвращает элемент матрицы по индексам
+         *
+         * @param rowIndex индекс строки
+         * @param colIndex индекс столбца
+         * @return элемент матрицы по индексам
+         * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+         * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+         */
+        double getValueAt(int rowIndex, int colIndex) throws IndexOutOfBoundsException;
+
+        /**
+         * Устанавливает элемент матрицы по индексам
+         *
+         * @param rowIndex индекс строки
+         * @param colIndex индекс столбца
+         * @param value новое значение элемента
+         * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+         * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+         */
+        void setValueAt(int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException;
+
+        /**
+         * Возвращает сумму текущей матрицы и второго аргумента. <br/>
+         * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+         *
+         * @param otherMatrix второй аргумент (матрица)
+         * @return сумма матриц <b><i>(новый объект матрицы)</i></b>
+         * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+         * @throws NullPointerException если второй аргумент null
+         */
+        IMatrix add(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+
+        /**
+         * Возвращает разность текущей матрицы и второго аргумента.<br/>
+         * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+         *
+         * @param otherMatrix второй аргумент (матрица)
+         * @return разность матриц <b><i>(новый объект матрицы)</i></b>
+         * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+         * @throws NullPointerException если второй аргумент null
+         */
+        IMatrix sub(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+
+        /**
+         * Возвращает произведение текущей матрицы и второго аргумента.<br/>
+         * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+         *
+         * @param otherMatrix второй аргумент (матрица)
+         * @return произведение матриц <b><i>(новый объект матрицы)</i></b>
+         * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+         * @throws NullPointerException если второй аргумент null
+         */
+        IMatrix mul(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+
+        /**
+         * Возвращает произведение текущей матрицы на число.<br/>
+         * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+         *
+         * @param value число
+         * @return произведение <b><i>(новый объект матрицы)</i></b>
+         */
+        IMatrix mul(double value);
+
+        /**
+         * Возвращает транспонированную матрицу по отношению к текущей
+         *
+         * @return транспонированная матрица по отношению к текущей
+         */
+        IMatrix transpose();
+
+        /**
+         * Заполняет текущю матрицу заднным значением
+         *
+         * @param value значение
+         */
+        void fillMatrix(double value);
+
+        /**
+         * Вычисляет детерминант матрицы.<br/>
+         * Описание алгоритма для любой матрицы тут: <a target="_blank" href="http://ru.wikipedia.org/wiki/LU-%D1%80%D0%B0%D0%B7%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">LU-разложение</a>
+         *
+         * @return детерминант
+         */
+        double determinant();
+
+        /**
+         * Проверяет является ли текущая матрица нулевой<br/>
+         * Нулевая матрица - матрица у которой все элементы нули:
+         *
+         * <table>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * </table>
+         *
+         * @return <b>true</b> если текущая матрица нулевая
+         */
+        boolean isNullMatrix();
+
+        /**
+         * Проверяет является ли текущая матрица единичной<br/>
+         * Единичная матрица - матрица у которой на главной диагонали единицы, а остальные элементы нули:
+         *
+         * <table>
+         * <tr><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+         * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td></tr>
+         * </table>
+         *
+         * @return <b>true</b> если текущая матрица единичная
+         */
+        boolean isIdentityMatrix();
+
+        /**
+         * Проверяет является ли текущая матрица квадратной. <br/>
+         * Т.е. матрица у которой количество строк равно количеству столбцов<br/>
+         *
+         * @return <b>true</b> если текущая матрица квадратная
+         */
+        boolean isSquareMatrix();
+
+        /**
+         * Вывод матрицу на консоль
+         * @see
+         */
+        void printToConsole();
+}
Index: src/lesson13/lesson13HomeWork/StringTextConvektor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/lesson13HomeWork/StringTextConvektor.java b/src/lesson13/lesson13HomeWork/StringTextConvektor.java
new file mode 100644
--- /dev/null	(date 1646732221864)
+++ b/src/lesson13/lesson13HomeWork/StringTextConvektor.java	(date 1646732221864)
@@ -0,0 +1,23 @@
+package lesson13.lesson13HomeWork;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.TreeSet;
+
+public class StringTextConvektor implements ListItils {
+
+
+    @Override
+    public List<String> asList(String... strings) throws IllegalArgumentException {
+        List<String> listAs =new ArrayList<>();
+        listAs.add(String.valueOf(strings));
+        return listAs;
+    }
+
+    @Override
+    public TreeSet<String> sortedList() throws IllegalArgumentException {
+        TreeSet<String> listSorted=new TreeSet<>();
+        listSorted.add(String.valueOf(listSorted));
+        return listSorted;
+    }
+}
Index: src/Lesson6/Interface/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/Interface/Main.java b/src/Lesson6/Interface/Main.java
new file mode 100644
--- /dev/null	(date 1644942441949)
+++ b/src/Lesson6/Interface/Main.java	(date 1644942441949)
@@ -0,0 +1,8 @@
+package Lesson6.Interface;
+
+public class Main {
+    public static void main(String[] args) {
+        Matrix matrix = new Matrix(5,5);
+        matrix.printToConsole();
+    }
+}
Index: src/Lesson6/Interface/Matrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/Interface/Matrix.java b/src/Lesson6/Interface/Matrix.java
new file mode 100644
--- /dev/null	(date 1644942541338)
+++ b/src/Lesson6/Interface/Matrix.java	(date 1644942541338)
@@ -0,0 +1,91 @@
+package Lesson6.Interface;
+
+
+
+    public class Matrix implements IMatrix {
+        private double[][] matrix;
+
+        public Matrix(int rows, int cols) {
+            matrix = new double[rows][cols];
+        }
+
+        @Override
+        public int getRows() {
+            return matrix.length;
+        }
+
+        @Override
+        public int getColumns() {
+            return 0;
+        }
+
+        @Override
+        public double getValueAt(int rowIndex, int colIndex) throws IndexOutOfBoundsException {
+            return 0;
+        }
+
+        @Override
+        public void setValueAt(int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException {
+
+        }
+
+        @Override
+        public IMatrix add(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix sub(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix mul(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix mul(double value) {
+            return null;
+        }
+
+        @Override
+        public IMatrix transpose() {
+            return null;
+        }
+
+        @Override
+        public void fillMatrix(double value) {
+
+        }
+
+        @Override
+        public double determinant() {
+            return 0;
+        }
+
+        @Override
+        public boolean isNullMatrix() {
+            return false;
+        }
+
+        @Override
+        public boolean isIdentityMatrix() {
+            return false;
+        }
+
+        @Override
+        public boolean isSquareMatrix() {
+            return false;
+        }
+
+        @Override
+        public void printToConsole() {
+            for (int i = 0; i < matrix.length; i++) {
+                for (int j = 0; j < matrix[i].length; j++) {
+                    System.out.print(matrix[i][j] + " ");
+                }
+                System.out.println();
+            }
+        }
+    }
Index: src/lesson13/lesson13HomeWork/MainListUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/lesson13HomeWork/MainListUtils.java b/src/lesson13/lesson13HomeWork/MainListUtils.java
new file mode 100644
--- /dev/null	(date 1646732240564)
+++ b/src/lesson13/lesson13HomeWork/MainListUtils.java	(date 1646732240564)
@@ -0,0 +1,23 @@
+package lesson13.lesson13HomeWork;
+
+import java.lang.reflect.Array;
+import java.util.*;
+
+public class MainListUtils extends StringTextConvektor {
+    public static void main(String[] args) {
+
+
+        OfissPeopple peopple = new OfissPeopple(22,"Dima");
+        OfissPeopple peopple1 = new OfissPeopple(23,"Vlad");
+        OfissPeopple peopple2 = new OfissPeopple(24,"Ivan");
+
+        List<OfissPeopple> peoples=new ArrayList<>();
+        if(peoples == null) {
+            throw new IllegalArgumentException("peoples == null ");
+        }
+
+
+
+    }
+
+}
Index: src/Lesson6/lesson6/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/Main.java b/src/Lesson6/lesson6/Main.java
new file mode 100644
--- /dev/null	(date 1645033819440)
+++ b/src/Lesson6/lesson6/Main.java	(date 1645033819440)
@@ -0,0 +1,29 @@
+package Lesson6.lesson6;
+
+import java.util.Scanner;
+
+public class Main {
+    public static void main(String[] args) {
+        String[][]  tours  = {{"Италия", "7", "самолет ", "5 звезд", "полупонсионат"},
+                              {"Египет", "4", "самолет ", "2 звезд", "понсионат"},
+                              {"Тунис ", "2", "самолет ", "3 звезд", "полупонсионат"},
+                              {"Кипр", "1", "самолет ", "1 звезд", "понсионат"},
+                              {"Кипр", "3", "самолет ", "2 звезд", "понсионат"}};
+
+        Scanner scanner = new Scanner(System.in);
+        System.out.println("В какую старну хотите поехать?");
+        String country = scanner.nextLine();
+
+        TourUtils.printToursByCountry(tours, country);
+
+        System.out.println("На сколько дней хотите поехать?");
+        String days = scanner.nextLine();
+
+        TourUtils.printToursByDays(tours, days);
+
+
+
+        System.out.println(TourUtils.averageHostByCountry(tours,country));
+
+    }
+}
Index: src/lesson14HashMap/HashMapExe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/HashMapExe.java b/src/lesson14HashMap/HashMapExe.java
new file mode 100644
--- /dev/null	(date 1647270075887)
+++ b/src/lesson14HashMap/HashMapExe.java	(date 1647270075887)
@@ -0,0 +1,28 @@
+package lesson14HashMap;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class HashMapExe {
+    public static void main(String[] args) {
+
+
+
+        Map<String,Double> nameAndMany = new HashMap<>(16,0.75f);
+
+        nameAndMany.put("Джон Доу", 3443.5);
+        nameAndMany.put("Toм Смит", 123.22);
+        nameAndMany.put("Джейн Бейкер", 1378.00);
+        nameAndMany.put("Тод Холл", 99.22);
+        nameAndMany.put("Ральф Смит", -19.98);
+        nameAndMany.put(null,22.33);
+
+        for(Map.Entry<String,Double>m: nameAndMany.entrySet()){
+            System.out.print(m.getKey()+" : ");
+            System.out.println(m.getValue());
+        }
+
+
+       // System.out.println(nameAndMany);
+    }
+}
Index: src/Lesson6/lesson6/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/Main1.java b/src/Lesson6/lesson6/Main1.java
new file mode 100644
--- /dev/null	(date 1644942666952)
+++ b/src/Lesson6/lesson6/Main1.java	(date 1644942666952)
@@ -0,0 +1,13 @@
+package Lesson6.lesson6;
+
+public class Main1 {
+    public static void main(String[] args) {
+        // тип переменной название переменной = new навзанее ()
+        Tour tour = new Tour();
+        tour.setDays(7);
+        tour.country = "Кипр";
+
+        Tour tour2 = new Tour();
+        tour2.setDays(5);
+    }
+}
Index: src/lesson14HashMap/ListIterExe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/ListIterExe.java b/src/lesson14HashMap/ListIterExe.java
new file mode 100644
--- /dev/null	(date 1647078024894)
+++ b/src/lesson14HashMap/ListIterExe.java	(date 1647078024894)
@@ -0,0 +1,33 @@
+package lesson14HashMap;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.ListIterator;
+
+public class ListIterExe {
+    public static void main(String[] args) {
+
+        String ss = "MADAM";
+        String s = "11411";
+        String s1 = "А роза упала на лапу азора";
+        char[] chars = s.toCharArray();
+
+        List<Character> characters = new ArrayList<>();
+        boolean isPolindrom = true;
+
+        for (char c : chars) {
+            characters.add(c);
+        }
+        ListIterator<Character> iter = characters.listIterator();
+        ListIterator<Character> revers = characters.listIterator(characters.size());
+
+        while (iter.hasNext() && revers.hasPrevious()) {
+            if(!iter.next().equals(revers.previous())){
+                isPolindrom=false;
+                break;
+            }
+        }
+        if(isPolindrom) System.out.println("Это Полиндром");
+        else System.out.println("Это не Полиндром");
+    }
+}
Index: src/Lesson6/lesson6/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/Main2.java b/src/Lesson6/lesson6/Main2.java
new file mode 100644
--- /dev/null	(date 1645034381079)
+++ b/src/Lesson6/lesson6/Main2.java	(date 1645034381079)
@@ -0,0 +1,18 @@
+package Lesson6.lesson6;
+
+public class Main2 {
+    public static void main(String[] args) {
+        Person person1 = new Person();
+        person1.setAge(23);
+        person1.setDohod(2100000);
+        person1.setName("Vasya");
+        person1.setSurname("Skobsow");
+
+
+        Person person2=new Person("egor","fillipow",34,222222222);
+
+
+        System.out.println(person1);
+        System.out.println(person2);
+    }
+}
Index: src/Lesson6/lesson6/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/Person.java b/src/Lesson6/lesson6/Person.java
new file mode 100644
--- /dev/null	(date 1645034441793)
+++ b/src/Lesson6/lesson6/Person.java	(date 1645034441793)
@@ -0,0 +1,63 @@
+package Lesson6.lesson6;
+
+public class Person {
+    private int age;
+    private String name;
+    private String surname;
+    private int dohod;
+
+
+    // конструктуры
+    public Person(){
+    }
+
+    //конструктор 2
+    public Person(String name,String surname,int age,int dohod){
+        this.name=name;
+        this.surname=surname;
+        this.age=age;
+        this.dohod=dohod;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setSurname(String surname) {
+        this.surname = surname;
+    }
+
+    public void setDohod(int dohod) {
+        this.dohod = dohod;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getSurname() {
+        return surname;
+    }
+
+    public int getDohod() {
+        return dohod;
+    }
+
+    @Override
+    public String toString() {
+        return "Person{" +
+                "age=" + age +
+                ", name='" + name + '\'' +
+                ", surname='" + surname + '\'' +
+                ", dohod=" + dohod +
+                '}';
+    }
+}
Index: src/Lesson7/HomeWork/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/HomeWork/Employee.java b/src/Lesson7/HomeWork/Employee.java
new file mode 100644
--- /dev/null	(date 1644327719526)
+++ b/src/Lesson7/HomeWork/Employee.java	(date 1644327719526)
@@ -0,0 +1,23 @@
+package Lesson7.HomeWork;
+
+public class Employee {
+    public int id;
+    public String name;
+    public int age;
+    public String position;
+    public double salary;
+    private double netSalary;
+
+    void PrintIfoEmployee() {
+        System.out.print(" ID - " + id + '\n' + " Name - " + name + '\n' + " Age - " + age + '\n' + " Possition - " + position + '\n' + " Sallaary - " + salary);
+
+    }
+
+    public void addSalary(){
+        double netSalary = salary * ( salary / 100);
+       double result = netSalary + salary;
+        System.out.println((result));
+    }
+
+
+}
Index: src/Lesson6/lesson6/Tour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/Tour.java b/src/Lesson6/lesson6/Tour.java
new file mode 100644
--- /dev/null	(date 1644942743239)
+++ b/src/Lesson6/lesson6/Tour.java	(date 1644942743239)
@@ -0,0 +1,19 @@
+package Lesson6.lesson6;
+
+public class Tour {
+    public String country;
+    // переменные (поля класса ) характеристики
+    //
+    // методы( то что умеем делать этот тип )
+    // ООП
+    private int days;
+    //private String country;
+    private String typeOfHotel;
+    private String typeOfVehicle;
+    private int cost;
+    private int stars;
+
+    public void setDays(int days){
+        this.days=days;
+    }
+}
Index: src/Lesson7/HomeWork/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/HomeWork/Main.java b/src/Lesson7/HomeWork/Main.java
new file mode 100644
--- /dev/null	(date 1644327643258)
+++ b/src/Lesson7/HomeWork/Main.java	(date 1644327643258)
@@ -0,0 +1,33 @@
+package Lesson7.HomeWork;
+
+public class Main {
+
+
+
+
+    public static void main(String[] args) {
+
+        Employee employee = new Employee();
+        employee.id = 1;
+        employee.position = "supervisor";
+        employee.age = 33;
+        employee.name = "Ivan";
+        employee.salary = 100.000;
+        employee.PrintIfoEmployee();
+        employee.addSalary();
+
+
+
+        System.out.println('\n');
+
+        Employee employee1 = new Employee();
+        employee1.id = 2;
+        employee1.position = "Manager";
+        employee1.age = 25;
+        employee1.name = "Vlad";
+        employee1.salary = 50.000;
+        employee1.PrintIfoEmployee();
+    }
+
+
+}
Index: src/Lesson6/lesson6/TourUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson6/lesson6/TourUtils.java b/src/Lesson6/lesson6/TourUtils.java
new file mode 100644
--- /dev/null	(date 1645033975574)
+++ b/src/Lesson6/lesson6/TourUtils.java	(date 1645033975574)
@@ -0,0 +1,49 @@
+package Lesson6.lesson6;
+
+public class TourUtils {
+    public static void printToursByCountry(String[][] tours, String country) {
+        for (int i = 0; i < tours.length; i++) {
+            if (country.equals(tours[i][0])) {
+                //System.out.println(tours[i][0] + tours[i][0] + "дней");
+                System.out.printf("%s,%s дней,%s руб,%s,%s,%s\n",
+                        tours[i][0],
+                        tours[i][1],
+                        tours[i][2],
+                        tours[i][3],
+                        tours[i][4],
+                        tours[i][5]);
+            }
+        }
+    }
+
+    public static void printToursByDays(String[][] tours, String days) {
+        int daysTrip = Integer.parseInt(days);
+
+        for (int i = 0; i < tours.length; i++) {
+            int daysCurrentTrip = Integer.parseInt(tours[i][i]);
+            if (daysCurrentTrip >= daysTrip -2 && daysCurrentTrip <= daysTrip +2) {
+                System.out.printf("%s,%s дней,% руб,%s,%s\n",
+                        tours[i][0],
+                        tours[i][1],
+                        tours[i][2],
+                        tours[i][3],
+                        tours[i][4],
+                        tours[i][5]);
+            }
+        }
+    }
+
+    public static int averageHostByCountry(String[][] tours,String country){
+        int costAllTripByCountry = 0;
+        int countTripByCountry = 0;
+        for(int i = 0;i < tours.length;i++){
+            if(country.equals(tours[i][0])){
+                int currentTripCost = Integer.parseInt(tours[i][2]);
+                costAllTripByCountry+=currentTripCost;
+                countTripByCountry++;
+
+            }
+        }
+        return costAllTripByCountry / countTripByCountry;
+    }
+}
Index: src/Lesson8/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/Car.java b/src/Lesson8/Car.java
new file mode 100644
--- /dev/null	(date 1644417583235)
+++ b/src/Lesson8/Car.java	(date 1644417583235)
@@ -0,0 +1,33 @@
+package Lesson8;
+
+public class Car {
+    String color;
+    String engine;
+    Wheel wheel;
+
+    Car() {
+    }
+
+    Car(String c, String e, Wheel w) {
+        color = c;
+        engine = e;
+        wheel = w;
+        System.out.println("Создаем обьект типа Car");
+    }
+
+
+}
+
+class TestCar {
+    public static void main(String[] args) {
+
+        Car bmw = new Car();
+        Car Mersedes = new Car();
+        Car kia = new Car();
+
+//         bmw.color="red";
+//         bmw.engine="V8";
+//         System.out.println(bmw.color+" "+bmw.engine);
+
+    }
+}
Index: src/Lesson7/Lesson7/InCorrectStoronaException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Lesson7/InCorrectStoronaException.java b/src/Lesson7/Lesson7/InCorrectStoronaException.java
new file mode 100644
--- /dev/null	(date 1644942962536)
+++ b/src/Lesson7/Lesson7/InCorrectStoronaException.java	(date 1644942962536)
@@ -0,0 +1,22 @@
+package Lesson7.Lesson7;
+
+public class InCorrectStoronaException extends  Exception {
+    public InCorrectStoronaException() {
+    }
+
+    public InCorrectStoronaException(String message) {
+        super(message);
+    }
+
+    public InCorrectStoronaException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public InCorrectStoronaException(Throwable cause) {
+        super(cause);
+    }
+
+    public InCorrectStoronaException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+        super(message, cause, enableSuppression, writableStackTrace);
+    }
+}
Index: src/lesson2/HomeWork/Calculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/HomeWork/Calculator.java b/src/lesson2/HomeWork/Calculator.java
new file mode 100644
--- /dev/null	(date 1644397757487)
+++ b/src/lesson2/HomeWork/Calculator.java	(date 1644397757487)
@@ -0,0 +1,85 @@
+package lesson2.HomeWork;
+
+import java.util.Scanner;
+
+public class Calculator {
+    public static void main(String[] args) {
+        double num1 = getNumber();
+        double num2 = getNumber();
+        char operation = getOperation();
+        double result = calc(num1, num2, operation);
+        System.out.println("Результат:" + result);
+    }
+
+    public static double getNumber() {
+        Scanner sc = new Scanner(System.in);
+        System.out.println("Введите число:");
+        if(sc.hasNextDouble()) {
+            return sc.nextDouble();
+        } else {
+            System.out.println("Ошибка при вводе. Повторите ввод");
+            return getNumber();
+        }
+    }
+
+    public static char getOperation() {
+        Scanner sc = new Scanner(System.in);
+        System.out.println("Выберите номер операции:\n1 - прибавить\n2 - отнять\n3 - умножить\n4 - разделить");
+        int operationNumber = 0;
+        if(sc.hasNextInt()) {
+            operationNumber = sc.nextInt();
+        } else {
+            System.out.println("Вы ввели не число! Повторите ввод!");
+            return getOperation();
+        }
+        switch (operationNumber) {
+            case 1:
+                return '+';
+            case 2:
+                return '-';
+            case 3:
+                return '*';
+            case 4:
+                return '/';
+            default:
+                System.out.println("Неправильная операция! Повторите ввод!");
+                return getOperation();
+        }
+    }
+
+    public static double add(double num1, double num2) {
+        return num1+num2;
+    }
+
+    public static double sub(double num1, double num2) {
+        return num1-num2;
+    }
+
+    public static double mul(double num1, double num2) {
+        return num1*num2;
+    }
+
+    public static double div(double num1, double num2) {
+        if(num2 != 0.0) {
+            return num1/num2;
+        } else {
+            System.out.println("На 0 делить нельзя!");
+            return Double.NaN;
+        }
+    }
+
+    public static double calc(double num1, double num2, char operation) {
+        switch (operation) {
+            case '+':
+                return add(num1, num2);
+            case '-':
+                return sub(num1, num2);
+            case '*':
+                return mul(num1, num2);
+            case '/':
+                return div(num1, num2);
+            default:
+                return Double.NaN;
+        }
+    }
+}
Index: src/Lesson7/Lesson7/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Lesson7/Main.java b/src/Lesson7/Lesson7/Main.java
new file mode 100644
--- /dev/null	(date 1645033289868)
+++ b/src/Lesson7/Lesson7/Main.java	(date 1645033289868)
@@ -0,0 +1,17 @@
+package Lesson7.Lesson7;
+
+public class Main {
+
+    private static int a;
+
+    public static void main(String[] args) {
+        Treugolnik treugolnik = new Treugolnik();
+        try {
+            treugolnik.initSides( 2, 2, 3);
+        } catch (InCorrectStoronaException e) {
+            System.out.println(e.getMessage());
+        }
+        System.out.println("Its ok");
+
+    }
+}
Index: src/Lesson7/Lesson7/Treugolnik.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Lesson7/Treugolnik.java b/src/Lesson7/Lesson7/Treugolnik.java
new file mode 100644
--- /dev/null	(date 1645033541063)
+++ b/src/Lesson7/Lesson7/Treugolnik.java	(date 1645033541063)
@@ -0,0 +1,26 @@
+package Lesson7.Lesson7;
+
+public class Treugolnik {
+    private int a;
+    private int b;
+    private int c;
+
+    public void initSides(int a, int b, int c) throws InCorrectStoronaException {
+        //
+        if (a <= 0 || b <= 0 || c <= 0) {
+            throw new InCorrectStoronaException("a <= 0 || b <= 0||b<=0||c<=0");
+        }
+        if (b + c <= a) {
+            throw new InCorrectStoronaException("Слишком большая сторона A ");
+        }
+        if (a + b <= c) {
+            throw new InCorrectStoronaException("Слишком большая сторона C ");
+        }
+        if (a + c <= b) {
+            throw new InCorrectStoronaException("Слишком большая сторона B ");
+        }
+        this.a = a;
+        this.b = b;
+        this.c = c;
+    }
+}
Index: src/Lesson10/lesson10/Dishes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/lesson10/Dishes.java b/src/Lesson10/lesson10/Dishes.java
new file mode 100644
--- /dev/null	(date 1644943036226)
+++ b/src/Lesson10/lesson10/Dishes.java	(date 1644943036226)
@@ -0,0 +1,6 @@
+package Lesson10.lesson10;
+
+public class Dishes extends  Nomenklatura {
+    private Ingridient[] ingridients = new Ingridient[100];
+}
+
Index: src/Lesson10/lesson10/Drinks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/lesson10/Drinks.java b/src/Lesson10/lesson10/Drinks.java
new file mode 100644
--- /dev/null	(date 1644943077881)
+++ b/src/Lesson10/lesson10/Drinks.java	(date 1644943077881)
@@ -0,0 +1,7 @@
+package Lesson10.lesson10;
+
+
+
+public class Drinks extends Nomenklatura{
+
+}
Index: src/Lesson10/lesson10/Ingridient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/lesson10/Ingridient.java b/src/Lesson10/lesson10/Ingridient.java
new file mode 100644
--- /dev/null	(date 1644943102623)
+++ b/src/Lesson10/lesson10/Ingridient.java	(date 1644943102623)
@@ -0,0 +1,6 @@
+package Lesson10.lesson10;
+
+public class Ingridient {
+    private String name;
+    private String unit;
+}
Index: src/Lesson10/lesson10/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/lesson10/Menu.java b/src/Lesson10/lesson10/Menu.java
new file mode 100644
--- /dev/null	(date 1644943128523)
+++ b/src/Lesson10/lesson10/Menu.java	(date 1644943128523)
@@ -0,0 +1,8 @@
+package Lesson10.lesson10;
+
+public class Menu {
+    // private Dishes[] dishes = new Dishes[100];
+    //private Drinks[]drinks = new Drinks[100];
+
+    private Nomenklatura[] nomenklaturas = new Nomenklatura[100];
+}
Index: src/Lesson10/lesson10/Nomenklatura.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/lesson10/Nomenklatura.java b/src/Lesson10/lesson10/Nomenklatura.java
new file mode 100644
--- /dev/null	(date 1644943162583)
+++ b/src/Lesson10/lesson10/Nomenklatura.java	(date 1644943162583)
@@ -0,0 +1,31 @@
+package Lesson10.lesson10;
+
+public class Nomenklatura {
+    private String name;
+    private int ves;
+    private int price;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getVes() {
+        return ves;
+    }
+
+    public void setVes(int ves) {
+        this.ves = ves;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+}
Index: src/lesson14HashMap/TreeMapExe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/TreeMapExe.java b/src/lesson14HashMap/TreeMapExe.java
new file mode 100644
--- /dev/null	(date 1647105368167)
+++ b/src/lesson14HashMap/TreeMapExe.java	(date 1647105368167)
@@ -0,0 +1,28 @@
+package lesson14HashMap;
+
+import java.util.Comparator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.TreeMap;
+
+public class TreeMapExe {
+    @SuppressWarnings("DiamondCanBeReplacedWithExplicitTypeArguments")
+    public static void main(String[] args) {
+
+        Map<Integer, String> linkedMap = new LinkedHashMap<>(16,0.75f,true);
+
+
+        linkedMap.put(5,"a");
+        linkedMap.put(4,"a");
+        linkedMap.put(3,"a");
+        linkedMap.put(2,"a");
+        linkedMap.put(1,"a");
+
+
+          System.out.println(linkedMap);
+        linkedMap.get(5);
+        linkedMap.put(3,"a");
+        System.out.println(linkedMap);
+
+    }
+}
Index: src/Lesson7/Homework2/Krug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Homework2/Krug.java b/src/Lesson7/Homework2/Krug.java
new file mode 100644
--- /dev/null	(date 1644943347618)
+++ b/src/Lesson7/Homework2/Krug.java	(date 1644943347618)
@@ -0,0 +1,14 @@
+package Lesson7.Homework2;
+
+public class Krug extends  OkruglayaFigura{
+
+    public Krug(){
+
+    }
+
+    public Krug(double radius){
+        super(radius);
+        //this.setRadius(radius);
+    }
+
+}
Index: src/Lesson7/Homework2/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Homework2/Main.java b/src/Lesson7/Homework2/Main.java
new file mode 100644
--- /dev/null	(date 1644943392679)
+++ b/src/Lesson7/Homework2/Main.java	(date 1644943392679)
@@ -0,0 +1,14 @@
+package Lesson7.Homework2;
+
+import java.util.Scanner;
+
+public class Main {
+    public static void main(String[] args) {
+        Krug krug = new Krug(4);
+        krug.setRadius(3.5);
+
+        Oval oval = new Oval ();
+        oval.setRadius(2.5);
+        oval.getRadius2 (3.5);
+    }
+}
Index: src/Lesson8/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/Person.java b/src/Lesson8/Person.java
new file mode 100644
--- /dev/null	(date 1644428182797)
+++ b/src/Lesson8/Person.java	(date 1644428182797)
@@ -0,0 +1,51 @@
+package Lesson8;
+
+public class Person {
+    String name;
+    Car car;
+    BankAccount ba;
+    static int count = 0;
+
+    Person() {
+        count++;
+    }
+
+    void setName(String n) {
+        name = n;
+    }
+
+    void setCar(Car c) {
+        car=c;
+    }
+    void setBankAccount(BankAccount b){
+        ba=b;
+    }
+
+    void printInfo() {
+        System.out.println(" My names " + name + " у моей машины цвет " + car.color
+                + " Motor " + car.engine + " this my nomer check " + ba.idAccount
+                + " на нем " + ba.countMoney);
+    }
+}
+
+class TestPerson {
+    public static void main(String[] args) {
+        Person person = new Person();
+        person.name = "Dima";
+        Wheel wheel = new Wheel(19, "Mishlen", "Lipuchka");
+        Car car = new Car("blu", "v10", wheel);
+        Car car1 = new Car( "black","V6",wheel);
+        BankAccount bankAccount = new BankAccount(12345, 5000);
+        person.car = car;
+        person.ba = bankAccount;
+        Person person1 = new Person();
+        person1.setName("Ivan");
+        person1.setCar(car1);
+        BankAccount bankAccount1 = new BankAccount();
+        person1.setBankAccount(bankAccount1);
+
+        person.printInfo();
+
+        System.out.println(Person.count);
+    }
+}
\ No newline at end of file
Index: src/Lesson7/Homework2/OkruglayaFigura.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Homework2/OkruglayaFigura.java b/src/Lesson7/Homework2/OkruglayaFigura.java
new file mode 100644
--- /dev/null	(date 1644943425071)
+++ b/src/Lesson7/Homework2/OkruglayaFigura.java	(date 1644943425071)
@@ -0,0 +1,20 @@
+package Lesson7.Homework2;
+
+public class OkruglayaFigura {
+    private double radius;
+
+    public OkruglayaFigura() {
+    }
+
+    public OkruglayaFigura(double radius) {
+        this.radius = radius;
+    }
+
+    public double getRadius() {
+        return radius;
+    }
+
+    public void setRadius(double radius) {
+        this.radius = radius;
+    }
+}
Index: src/Lesson7/Homework2/Oval.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Homework2/Oval.java b/src/Lesson7/Homework2/Oval.java
new file mode 100644
--- /dev/null	(date 1644943461227)
+++ b/src/Lesson7/Homework2/Oval.java	(date 1644943461227)
@@ -0,0 +1,22 @@
+package Lesson7.Homework2;
+
+public class Oval extends OkruglayaFigura{
+    private double radius2;
+
+    public Oval(){
+
+    }
+
+    public  Oval (double radius1,double radius2){
+        super();
+        this.radius2=radius2;
+    }
+
+    public double getRadius2(double v) {
+        return radius2;
+    }
+
+    public void setRadius2(double radius2) {
+        this.radius2 = radius2;
+    }
+}
Index: src/Lesson8/BankAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/BankAccount.java b/src/Lesson8/BankAccount.java
new file mode 100644
--- /dev/null	(date 1644418003720)
+++ b/src/Lesson8/BankAccount.java	(date 1644418003720)
@@ -0,0 +1,14 @@
+package Lesson8;
+
+public class BankAccount {
+    int idAccount;
+    int countMoney;
+
+    public BankAccount() {}
+
+    BankAccount(int id, int acm) {
+        idAccount = id;
+        countMoney = acm;
+        System.out.println("Создался банковский аакаунт " + id + " " + countMoney );
+    }
+}
Index: src/Lesson8/Wheel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/Wheel.java b/src/Lesson8/Wheel.java
new file mode 100644
--- /dev/null	(date 1644417865259)
+++ b/src/Lesson8/Wheel.java	(date 1644417865259)
@@ -0,0 +1,16 @@
+package Lesson8;
+
+public class Wheel {
+    int radius;
+    String marka;
+    String rubber;//резина
+
+    Wheel(int rad, String m, String ru) {
+        radius = rad;
+        marka = m;
+        rubber = ru;
+        System.out.println("Создалось колесо " + radius + " marka " + marka + " " + rubber );
+    }
+
+
+}
Index: src/Lesson7/Practic/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Practic/Main.java b/src/Lesson7/Practic/Main.java
new file mode 100644
--- /dev/null	(date 1644998673967)
+++ b/src/Lesson7/Practic/Main.java	(date 1644998673967)
@@ -0,0 +1,44 @@
+package Lesson7.Practic;
+
+import java.util.Date;
+
+public class Main {
+    public static void main(String[] args) {
+        User user =new User();
+        user.setNicName("Пришелец-ZD2768");
+        user.setPoints(50);
+        user.setName("Виктор");
+
+        User user2 =new User();
+        user2.setNicName("Пришелец-AAK20958");
+        user2.setPoints(352);
+        user2.setName("Павел");
+        user2.setLevel(1);
+        user2.setPathToAvatar("ttps://c.dns-shop.ru/thumb/st1/fit/328/328/6a7bc2b700fa30fed310fe6616e9ff35/bb6fa769bbe393c849a725fde858008447abd5d70bc1309ef92fa65760f39295.png");
+
+        User user3=new User();
+
+        Otzyv otsyv1 =new Otzyv(4,new Date());
+        otsyv1.setComment("dddddddddddd");
+        otsyv1.setUser(user);
+
+        Tovar tovar1 = new Tovar();
+        tovar1.setFullName("Вентилятор ");
+        tovar1.setFullPrice(2799);
+        tovar1.setSalePrice(2700);
+        tovar1.addOtzyvToTovar(otsyv1);
+
+        Otzyv otsyv2 =new Otzyv();
+        otsyv2.setUser(user3);
+        otsyv2.setDate(new Date());
+        otsyv2.setStars(5);
+        otsyv2.setComment("Bine");
+
+        //System.out.println();
+        tovar1.addOtzyvToTovar(otsyv2);
+        double avg= tovar1.avgRaiting();
+        System.out.println(avg);
+
+
+    }
+}
Index: src/Lesson7/Practic/Otzyv.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Practic/Otzyv.java b/src/Lesson7/Practic/Otzyv.java
new file mode 100644
--- /dev/null	(date 1644998673967)
+++ b/src/Lesson7/Practic/Otzyv.java	(date 1644998673967)
@@ -0,0 +1,57 @@
+package Lesson7.Practic;
+
+import java.util.Date;
+
+public class Otzyv {
+    private  String comment;
+    private  int stars;
+    private Date date;
+    private User user;
+
+    public Otzyv() {
+    }
+
+    public Otzyv(int stars, Date date) {
+        this.stars = stars;
+        this.date = date;
+    }
+
+    public Otzyv(String comment, int stars, Date date, User user) {
+        this.comment = comment;
+        this.stars = stars;
+        this.date = date;
+        this.user = user;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public int getStars() {
+        return stars;
+    }
+
+    public void setStars(int stars) {
+        this.stars = stars;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+}
Index: src/Lesson7/Practic/Tovar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Practic/Tovar.java b/src/Lesson7/Practic/Tovar.java
new file mode 100644
--- /dev/null	(date 1644950850908)
+++ b/src/Lesson7/Practic/Tovar.java	(date 1644950850908)
@@ -0,0 +1,74 @@
+package Lesson7.Practic;
+
+public class Tovar {
+    private String fullName;
+    private int fullPrice;
+    private int salePrice;
+    private String Proizvoditel;
+    private Otzyv[] otzyvs = new Otzyv[1000];
+
+    public Tovar() {
+    }
+
+    public String getFullName() {
+        return fullName;
+    }
+
+    public void setFullName(String fullName) {
+        this.fullName = fullName;
+    }
+
+    public int getFullPrice() {
+        return fullPrice;
+    }
+
+    public void setFullPrice(int fullPrice) {
+        this.fullPrice = fullPrice;
+    }
+
+    public int getSalePrice() {
+        return salePrice;
+    }
+
+    public void setSalePrice(int salePrice) {
+        this.salePrice = salePrice;
+    }
+
+    public String getProizvoditel() {
+        return Proizvoditel;
+    }
+
+    public void setProizvoditel(String proizvoditel) {
+        Proizvoditel = proizvoditel;
+    }
+
+    public Otzyv[] getOtzyvs() {
+        return otzyvs;
+    }
+
+    public void setOtzyvs(Otzyv[] otzyvs) {
+        this.otzyvs = otzyvs;
+    }
+
+    public void addOtzyvToTovar(Otzyv otzyv){
+        for(int i =0;i<otzyvs.length;i++){
+            if(otzyvs[i]==null){
+                otzyvs[i]=otzyv;
+                break;
+            }
+        }
+    }
+
+    public double avgRaiting(){
+        double summa = 0;
+
+        int countOtzyvs = 0;
+        for(Otzyv o:otzyvs){
+            if(o !=null){
+                summa=summa+o.getStars();
+                countOtzyvs++;
+            }
+        }
+        return summa / countOtzyvs;
+    }
+}
Index: src/Lesson7/Practic/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Practic/User.java b/src/Lesson7/Practic/User.java
new file mode 100644
--- /dev/null	(date 1644998609595)
+++ b/src/Lesson7/Practic/User.java	(date 1644998609595)
@@ -0,0 +1,64 @@
+package Lesson7.Practic;
+
+public class User {
+    private String nicName;
+    private String name;
+    private  int points;
+    private int level;
+    private String pathToAvatar="https://c.dns-shop.ru/thumb/st1/fit/328/328/6a7bc2b700fa30fed310fe6616e9ff35/bb6fa769bbe393c849a725fde858008447abd5d70bc1309ef92fa65760f39295.png";
+
+    public User() {
+    }
+
+    public User(String nicName) {
+        this.nicName = nicName;
+    }
+
+    public User(String nicName, String name, int points, int level, String pathToAvatar) {
+        this.nicName = nicName;
+        this.name = name;
+        this.points = points;
+        this.level = level;
+        this.pathToAvatar = pathToAvatar;
+    }
+
+    public String getNicName() {
+        return nicName;
+    }
+
+    public void setNicName(String nicName) {
+        this.nicName = nicName;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getPoints() {
+        return points;
+    }
+
+    public void setPoints(int points) {
+        this.points = points;
+    }
+
+    public int getLevel() {
+        return level;
+    }
+
+    public void setLevel(int level) {
+        this.level = level;
+    }
+
+    public String getPathToAvatar() {
+        return pathToAvatar;
+    }
+
+    public void setPathToAvatar(String pathToAvatar) {
+        this.pathToAvatar = pathToAvatar;
+    }
+}
Index: src/Lesson10/Lesson10PracticaInterface/Obuv.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Obuv.java b/src/Lesson10/Lesson10PracticaInterface/Obuv.java
new file mode 100644
--- /dev/null	(date 1645187717325)
+++ b/src/Lesson10/Lesson10PracticaInterface/Obuv.java	(date 1645187717325)
@@ -0,0 +1,6 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public abstract class Obuv {
+    public abstract void pochinit();
+
+}
Index: src/Lesson9/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/Employee.java b/src/Lesson9/Employee.java
new file mode 100644
--- /dev/null	(date 1644488881494)
+++ b/src/Lesson9/Employee.java	(date 1644488881494)
@@ -0,0 +1,82 @@
+package Lesson9;
+
+public class Employee {
+    String name;
+    String surname;
+    String possition;
+    int age;
+    String department;
+    int salary;
+
+    public Employee() {
+    }
+
+    public Employee(String name, String surname, String possition, int age, int salary) {
+        this.name = name;
+        this.surname = surname;
+        this.possition = possition;
+        this.age = age;
+        this.salary = salary;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getSurname() {
+        return surname;
+    }
+
+    public void setSurname(String surname) {
+        this.surname = surname;
+    }
+
+    public String getPossition() {
+        return possition;
+    }
+
+    public void setPossition(String possition) {
+        this.possition = possition;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public String getDepartment() {
+        return department;
+    }
+
+    public void setDepartment(String department) {
+        this.department = department;
+    }
+
+    public int getSalary() {
+        return salary;
+    }
+
+    public void setSalary(int salary) {
+        this.salary = salary;
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+                "name='" + name + '\'' +
+                ", surname='" + surname + '\'' +
+                ", possition='" + possition + '\'' +
+                ", age=" + age +
+                ", department='" + department + '\'' +
+                ", salary=" + salary +
+                '}';
+    }
+}
+
Index: src/Lesson9/Departmen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/Departmen.java b/src/Lesson9/Departmen.java
new file mode 100644
--- /dev/null	(date 1644487867373)
+++ b/src/Lesson9/Departmen.java	(date 1644487867373)
@@ -0,0 +1,61 @@
+package Lesson9;
+
+import java.util.Arrays;
+
+public class Departmen {
+    String name;
+    int minSalary;
+    int maxSalary;
+    Employee[] employees;
+
+    public Departmen() {
+    }
+
+    public Departmen(String name, int minSalary, int maxSalary) {
+        this.name = name;
+        this.minSalary = minSalary;
+        this.maxSalary = maxSalary;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getMinSalary() {
+        return minSalary;
+    }
+
+    public void setMinSalary(int minSalary) {
+        this.minSalary = minSalary;
+    }
+
+    public int getMaxSalary() {
+        return maxSalary;
+    }
+
+    public void setMaxSalary(int maxSalary) {
+        this.maxSalary = maxSalary;
+    }
+
+    public Employee[] getEmployees() {
+        return employees;
+    }
+
+    public void setEmployees(Employee[] employees) {
+        this.employees = employees;
+    }
+
+    @Override
+    public String toString() {
+        return "Departmen{" +
+                "name='" + name + '\'' +
+                ", minSalary=" + minSalary +
+                ", maxSalary=" + maxSalary +
+                ", employees=" + Arrays.toString(employees) +
+                '}';
+    }
+}
Index: src/Lesson9/TestSetAndGet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/TestSetAndGet.java b/src/Lesson9/TestSetAndGet.java
new file mode 100644
--- /dev/null	(date 1644488822154)
+++ b/src/Lesson9/TestSetAndGet.java	(date 1644488822154)
@@ -0,0 +1,32 @@
+package Lesson9;
+
+public class TestSetAndGet {
+    public static void main(String[] args) {
+        Departmen departmen = new Departmen();
+
+        departmen.setName("Dima");
+        departmen.setMinSalary(100);
+        departmen.setMaxSalary(500);
+
+        Employee[] employee = new Employee[5];
+        Employee employee1 = new Employee("Ivan", "Ivanow", "Devoloper", 22, 150);
+        Employee employee2 = new Employee("Petr", "Petrov", "Sales", 23, 160);
+        Employee employee3 = new Employee("ELena", "ELena", "HR", 24, 170);
+        Employee employee4 = new Employee("Masha", "Mashena", "Manager", 25, 180);
+        Employee employee5 = new Employee("Dima", "Dmitriev", "Devoloper", 26, 190);
+
+        employee[0] = employee1;
+        employee[1] = employee2;
+        employee[2] = employee3;
+        employee[3] = employee4;
+        employee[4] = employee5;
+        departmen.setEmployees(employee);
+
+
+        System.out.println(departmen.toString());
+
+
+
+    }
+
+}
Index: src/Lesson9/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/Animal.java b/src/Lesson9/Animal.java
new file mode 100644
--- /dev/null	(date 1644494077766)
+++ b/src/Lesson9/Animal.java	(date 1644494077766)
@@ -0,0 +1,12 @@
+package Lesson9;
+
+public class Animal {
+    String name;
+    int age;
+
+    void say(){
+        System.out.println("");
+    }
+
+
+}
Index: src/Lesson9/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/Dog.java b/src/Lesson9/Dog.java
new file mode 100644
--- /dev/null	(date 1644499117211)
+++ b/src/Lesson9/Dog.java	(date 1644499117211)
@@ -0,0 +1,20 @@
+package Lesson9;
+
+
+
+public class Dog extends Animal {
+
+
+    @Override
+    void say() {
+        System.out.println("GGAAAV Gaaavv");
+    }
+
+    @Override
+    public String toString() {
+        return "Dog{" +
+                "name='" + name + '\'' +
+                ", age=" + age +
+                '}';
+    }
+}
Index: src/Lesson9/TestDog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/TestDog.java b/src/Lesson9/TestDog.java
new file mode 100644
--- /dev/null	(date 1644509923536)
+++ b/src/Lesson9/TestDog.java	(date 1644509923536)
@@ -0,0 +1,21 @@
+package Lesson9;
+
+import java.util.Arrays;
+
+public class TestDog {
+    public static void main(String[] args) {
+        Cat cat = new Cat();
+        Dog dog =new Dog();
+        dog.name="Sharic";
+        dog.age = 2;
+
+
+        cat.say();
+        dog.say();
+        System.out.println(dog.toString());
+
+        Animal[] animals =new Animal[5];
+
+
+    }
+}
Index: src/Lesson9/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/Cat.java b/src/Lesson9/Cat.java
new file mode 100644
--- /dev/null	(date 1644509613095)
+++ b/src/Lesson9/Cat.java	(date 1644509613095)
@@ -0,0 +1,9 @@
+package Lesson9;
+
+public class Cat extends Animal{
+
+    @Override
+    void say() {
+        System.out.println("MAY may");
+    }
+}
Index: src/Lesson10/OnlineShop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/OnlineShop.java b/src/Lesson10/OnlineShop.java
new file mode 100644
--- /dev/null	(date 1644867725058)
+++ b/src/Lesson10/OnlineShop.java	(date 1644867725058)
@@ -0,0 +1,95 @@
+package Lesson10;
+
+public class OnlineShop {
+    String name ;
+    String adressUrl;
+    Pokupatel pokupatel;
+    Tovar tovar;
+
+    public OnlineShop() {
+    }
+
+    public OnlineShop(String name, String adressUrl, Pokupatel pokupatel, Tovar tovar) {
+        this.name = name;
+        this.adressUrl = adressUrl;
+        this.pokupatel = pokupatel;
+        this.tovar = tovar;
+    }
+
+    public boolean chekPokupki(Pokupatel pokupatel){
+        if (pokupatel.getPayCard().getBalance() >= tovar.getPrice()){
+            pokupatel.setTovar(this.tovar);
+            sendMessage(pokupatel);
+            System.out.println("Покупка прошла успешно");
+            System.out.println(pokupatel.getTovar());
+            System.out.println(pokupatel.getBonusCard());
+            return true;
+        }else {
+          return false;
+        }
+    }
+
+    public void sendMessage(Pokupatel pokupatel){
+        Message message = new Message();
+        Check check = new Check();
+        check.setBonus(tovar.getPrice() / 100 * 1);
+        check.setTovar(this.tovar);
+        check.setDatePokupki("27-11-2021 14:07");
+        PayCard payCard = maskirovkaCard(pokupatel.getPayCard());
+        check.setPayCard(payCard);
+        message.setHelloMessage("Здравствуйте " + pokupatel.getName() + " " + "Спасибо что выбрали магазин " + name);
+        message.setCheck(check);
+        System.out.println(message);
+
+    }
+    public PayCard maskirovkaCard(PayCard payCard){
+        String s1 = "XXXX-XXXX-XXXX-2122";//1234-5666-5555-2122
+        s1 += payCard.getCardNumber().substring(payCard.getCardNumber().length()-4);
+        payCard.setCardNumber(s1);
+        return payCard;
+
+    }
+
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getAdressUrl() {
+        return adressUrl;
+    }
+
+    public void setAdressUrl(String adressUrl) {
+        this.adressUrl = adressUrl;
+    }
+
+    public Pokupatel getPokupatel() {
+        return pokupatel;
+    }
+
+    public void setPokupatel(Pokupatel pokupatel) {
+        this.pokupatel = pokupatel;
+    }
+
+    public Tovar getTovar() {
+        return tovar;
+    }
+
+    public void setTovar(Tovar tovar) {
+        this.tovar = tovar;
+    }
+
+    @Override
+    public String toString() {
+        return "OnlineShop{" +
+                "name='" + name + '\'' +
+                ", adressUrl='" + adressUrl + '\'' +
+                ", pokupatel=" + pokupatel +
+                ", tovar=" + tovar +
+                '}';
+    }
+}
Index: src/Lesson10/Tovar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Tovar.java b/src/Lesson10/Tovar.java
new file mode 100644
--- /dev/null	(date 1644863800469)
+++ b/src/Lesson10/Tovar.java	(date 1644863800469)
@@ -0,0 +1,40 @@
+package Lesson10;
+
+
+public class Tovar {
+    String name;
+    int price;
+
+
+    public Tovar() {
+    }
+
+    public Tovar(String name, int price) {
+        this.name = name;
+        this.price = price;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Tovar{" +
+                "name='" + name + '\'' +
+                ", price=" + price +
+                '}';
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1647348620473)
+++ b/.gitignore	(date 1647348620473)
@@ -0,0 +1,2 @@
+# Project exclude paths
+/out/
\ No newline at end of file
Index: src/Lesson10/Pokupatel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Pokupatel.java b/src/Lesson10/Pokupatel.java
new file mode 100644
--- /dev/null	(date 1644863800464)
+++ b/src/Lesson10/Pokupatel.java	(date 1644863800464)
@@ -0,0 +1,106 @@
+package Lesson10;
+
+public class Pokupatel {
+    String name;
+    String phoneNumber;
+    String email;
+    String date;
+    PayCard payCard;
+    BonusCard bonusCard;
+    String BethDay;
+    Tovar tovar;
+
+
+
+    public Pokupatel() {
+    }
+
+    public Pokupatel(String name, String phoneNumber, String email, String date, PayCard payCard, BonusCard bonusCard, String bethDay, Tovar tovar) {
+        this.name = name;
+        this.phoneNumber = phoneNumber;
+        this.email = email;
+        this.date = date;
+        this.payCard = payCard;
+        this.bonusCard = bonusCard;
+        BethDay = bethDay;
+        this.tovar = tovar;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getPhoneNumber() {
+        return phoneNumber;
+    }
+
+    public void setPhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getDate() {
+        return date;
+    }
+
+    public void setDate(String date) {
+        this.date = date;
+    }
+
+    public PayCard getPayCard() {
+        return payCard;
+    }
+
+    public void setPayCard(PayCard payCard) {
+        this.payCard = payCard;
+    }
+
+    public BonusCard getBonusCard() {
+        return bonusCard;
+    }
+
+    public void setBonusCard(BonusCard bonusCard) {
+        this.bonusCard = bonusCard;
+    }
+
+    public String getBethDay() {
+        return BethDay;
+    }
+
+    public void setBethDay(String bethDay) {
+        BethDay = bethDay;
+    }
+
+    public Tovar getTovar() {
+        return tovar;
+    }
+
+    public void setTovar(Tovar tovar) {
+        this.tovar = tovar;
+    }
+
+    @Override
+    public String toString() {
+        return "Pokupatel{" +
+                "name='" + name + '\'' +
+                ", phoneNumber='" + phoneNumber + '\'' +
+                ", email='" + email + '\'' +
+                ", date='" + date + '\'' +
+                ", payCard=" + payCard +
+                ", bonusCard=" + bonusCard +
+                ", BethDay='" + BethDay + '\'' +
+                ", tovar=" + tovar +
+                '}';
+    }
+}
Index: src/Lesson10/PayCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/PayCard.java b/src/Lesson10/PayCard.java
new file mode 100644
--- /dev/null	(date 1644862080067)
+++ b/src/Lesson10/PayCard.java	(date 1644862080067)
@@ -0,0 +1,52 @@
+package Lesson10;
+
+import javax.annotation.processing.Generated;
+
+
+public class PayCard {
+    String cardNumber;
+    String cardHolder;
+    int balance;
+
+    public PayCard() {
+    }
+
+    public PayCard(String cardNumber, String cardHolder, int balance) {
+        this.cardNumber = cardNumber;
+        this.cardHolder = cardHolder;
+        this.balance = balance;
+    }
+
+    public String getCardNumber() {
+        return cardNumber;
+    }
+
+    public void setCardNumber(String cardNumber) {
+        this.cardNumber = cardNumber;
+    }
+
+    public String getCardHolder() {
+        return cardHolder;
+    }
+
+    public void setCardHolder(String cardHolder) {
+        this.cardHolder = cardHolder;
+    }
+
+    public int getBalance() {
+        return balance;
+    }
+
+    public void setBalance(int balance) {
+        this.balance = balance;
+    }
+
+    @Override
+    public String toString() {
+        return "PayCard{" +
+                "cardNumber='" + cardNumber + '\'' +
+                ", cardHolder='" + cardHolder + '\'' +
+                ", balance=" + balance +
+                '}';
+    }
+}
Index: src/Lesson10/BonusCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/BonusCard.java b/src/Lesson10/BonusCard.java
new file mode 100644
--- /dev/null	(date 1644861940308)
+++ b/src/Lesson10/BonusCard.java	(date 1644861940308)
@@ -0,0 +1,8 @@
+package Lesson10;
+
+public class BonusCard extends PayCard{
+
+    public BonusCard() {
+    }
+
+}
Index: src/Lesson10/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Message.java b/src/Lesson10/Message.java
new file mode 100644
--- /dev/null	(date 1644861940313)
+++ b/src/Lesson10/Message.java	(date 1644861940313)
@@ -0,0 +1,38 @@
+package Lesson10;
+
+public class Message {
+    String helloMessage;
+    Check check;
+
+    public Message() {
+    }
+
+    public Message(String helloMessage, Check check) {
+        this.helloMessage = helloMessage;
+        this.check = check;
+    }
+
+    public String getHelloMessage() {
+        return helloMessage;
+    }
+
+    public void setHelloMessage(String helloMessage) {
+        this.helloMessage = helloMessage;
+    }
+
+    public Check getCheck() {
+        return check;
+    }
+
+    public void setCheck(Check check) {
+        this.check = check;
+    }
+
+    @Override
+    public String toString() {
+        return "Message{" +
+                "helloMessage='" + helloMessage + '\'' +
+                ", check=" + check +
+                '}';
+    }
+}
Index: src/Lesson10/Check.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Check.java b/src/Lesson10/Check.java
new file mode 100644
--- /dev/null	(date 1644863203297)
+++ b/src/Lesson10/Check.java	(date 1644863203297)
@@ -0,0 +1,61 @@
+package Lesson10;
+
+public class Check {
+    String datePokupki;
+    Tovar tovar;
+    double bonus;
+    PayCard payCard;
+
+    public Check() {
+    }
+
+    public Check(String datePokupki, Tovar tovar, double bonus, PayCard payCard) {
+        this.datePokupki = datePokupki;
+        this.tovar = tovar;
+        this.bonus = bonus;
+        this.payCard = payCard;
+    }
+
+    public String getDatePokupki() {
+        return datePokupki;
+    }
+
+    public void setDatePokupki(String datePokupki) {
+        this.datePokupki = datePokupki;
+    }
+
+
+    public Tovar getTovar() {
+        return tovar;
+    }
+
+    public void setTovar(Tovar tovar) {
+        this.tovar = tovar;
+    }
+
+    public double getBonus() {
+        return bonus;
+    }
+
+    public void setBonus(double bonus) {
+        this.bonus = bonus;
+    }
+
+    public PayCard getPayCard() {
+        return payCard;
+    }
+
+    public void setPayCard(PayCard payCard) {
+        this.payCard = payCard;
+    }
+
+    @Override
+    public String toString() {
+        return "Check{" +
+                "datePokupki='" + datePokupki + '\'' +
+                ", tovar=" + tovar +
+                ", bonus=" + bonus +
+                ", payCard=" + payCard +
+                '}';
+    }
+}
Index: src/Lesson10/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Main.java b/src/Lesson10/Main.java
new file mode 100644
--- /dev/null	(date 1644867628478)
+++ b/src/Lesson10/Main.java	(date 1644867628478)
@@ -0,0 +1,42 @@
+package Lesson10;
+
+public class Main {
+    public static void main(String[] args) {
+
+
+        OnlineShop onlineShop = new OnlineShop();
+        onlineShop.setAdressUrl("https://magazin.com");
+        onlineShop.setName("Magazin");
+        Tovar tovar = new Tovar();
+        tovar.setName("Milk");
+        tovar.setPrice(30);
+        onlineShop.setTovar(tovar);
+
+
+        Pokupatel pokupatel = new Pokupatel();
+        pokupatel.setName("Dmitriy");
+        pokupatel.setEmail("pokupatel@mail.ru");
+        pokupatel.setPhoneNumber("8-999-000-79-99");
+        pokupatel.setBethDay("01.01.1990");
+
+
+        BonusCard bonusCard = new BonusCard();
+        bonusCard.setCardNumber("1234567");
+        bonusCard.setCardHolder("Skobsow Dmitriy");
+
+        PayCard payCard = new PayCard();
+        payCard.setCardNumber("1232-1223-4567-7656");
+        payCard.setCardHolder("Skobsow Dmitriy");
+        payCard.setBalance(1000);
+        pokupatel.setPayCard(payCard);
+        pokupatel.setBonusCard(bonusCard);
+
+
+
+        onlineShop.chekPokupki(pokupatel);
+
+
+    }
+
+}
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1647348620752)
+++ b/.idea/vcs.xml	(date 1647348620752)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/Lesson10/Lesson10PracticaInterface/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Main.java b/src/Lesson10/Lesson10PracticaInterface/Main.java
new file mode 100644
--- /dev/null	(date 1645189378390)
+++ b/src/Lesson10/Lesson10PracticaInterface/Main.java	(date 1645189378390)
@@ -0,0 +1,31 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Main {
+
+// InterFace
+    public static void main(String[] args) {
+
+        Tufli tufli1=new Tufli();
+        Tufli tufli2=new Tufli();
+        Tufli tufli3=new Tufli();
+
+        Sapogi sapogi1=new Sapogi();
+        Sapogi sapogi2=new Sapogi();
+        Sapogi sapogi3=new Sapogi();
+
+        Obuv[] obuvs =new Obuv[6];
+        obuvs[0]=sapogi1;
+        obuvs[1]=sapogi2;
+        obuvs[2]=sapogi3;
+
+        obuvs[3]=tufli1;
+        obuvs[4]=tufli2;
+        obuvs[5]=tufli3;
+
+        for(Obuv o:obuvs){
+            o.pochinit();//проявления полиморфизма
+        }
+
+    }
+
+}
Index: src/lesson12/Less0n12/Base.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Base.java b/src/lesson12/Less0n12/Base.java
new file mode 100644
--- /dev/null	(date 1644937680487)
+++ b/src/lesson12/Less0n12/Base.java	(date 1644937680487)
@@ -0,0 +1,8 @@
+package lesson12.Less0n12;
+
+public class Base {
+    public static int people_on_base = 0;//люди на базе
+    public static int vehicles_on_base = 0;//транспортные средства_на_базе
+    public static double petrol_on_base = 0;//бензин_на_базе
+    public static double goods_on_base = 0;//товары_на_базе
+}
Index: src/lesson12/Less0n12/Vehicle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Vehicle.java b/src/lesson12/Less0n12/Vehicle.java
new file mode 100644
--- /dev/null	(date 1644937074865)
+++ b/src/lesson12/Less0n12/Vehicle.java	(date 1644937074865)
@@ -0,0 +1,46 @@
+package lesson12.Less0n12;
+
+import lesson12.Less0n12.Base;
+
+public class Vehicle {
+
+    // чтоб видели только дочернее классы protected
+    protected double petrol_amount;//количество бензина
+    protected double tank_volume;//объем бака
+
+    public Vehicle(double petrol_amount, double tank_volume) {
+        this.petrol_amount = petrol_amount;
+        this.tank_volume = tank_volume;
+    }
+    // узнать объем бензобака в литрах;
+    public double getTankVolume() {
+        return tank_volume;
+    }
+
+    //узнать текущее количество топлива в баке;
+    public double getPetrolAmount() {
+        return petrol_amount;
+    }
+
+    // приехать на базу;
+    void arrive() {
+        Base.vehicles_on_base += 1;
+        Base.people_on_base += 1;// добавляем водителя
+
+    }
+
+    //залить полный бак и покинуть базу; в случае невозможности уехать возвращает false;
+    boolean leave() {
+        if (Base.people_on_base == 0) {
+            return false;
+        }
+        if (Base.petrol_on_base < tank_volume - petrol_amount) {
+            return false;
+        }
+        Base.petrol_on_base = Base.petrol_on_base - (tank_volume - petrol_amount);
+        petrol_amount = tank_volume;
+        Base.people_on_base -= 1;
+        Base.vehicles_on_base -= 1;
+        return true;
+    }
+}
Index: src/lesson12/Less0n12/Bus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Bus.java b/src/lesson12/Less0n12/Bus.java
new file mode 100644
--- /dev/null	(date 1644936861098)
+++ b/src/lesson12/Less0n12/Bus.java	(date 1644936861098)
@@ -0,0 +1,48 @@
+package lesson12.Less0n12;
+
+import lesson12.Less0n12.Base;
+
+public class Bus extends Vehicle {
+    int max_people;
+    int people;
+
+
+    public Bus(int people, int max_people, double petrol, double max_petrol) { // конструктор
+        super(petrol, max_petrol); //супер вызывает родительский а потом конструктор именно конкретного класса
+        this.max_people = max_people;
+        this.people = people;
+    }
+
+    public int getPeopleCount() {
+        return people;
+    }
+
+    public int getMaxPeople() {
+        return max_people;
+    }
+
+    @Override
+        // переопределение метода родительского класса
+    void arrive() {
+        super.arrive();
+        Base.people_on_base += people;
+        people = 0;
+    }
+
+    @Override
+        // переопределение метода родительского класса
+    boolean leave() {
+        if (!super.leave()) {
+            return false;
+        }
+
+        if (Base.people_on_base < max_people) {
+            max_people = Base.people_on_base;
+            Base.people_on_base = 0;
+        } else {
+            Base.people_on_base = Base.people_on_base - max_people;
+            people = max_people;
+        }
+        return true;
+    }
+}
Index: src/lesson12/Less0n12/Truck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Truck.java b/src/lesson12/Less0n12/Truck.java
new file mode 100644
--- /dev/null	(date 1644936861086)
+++ b/src/lesson12/Less0n12/Truck.java	(date 1644936861086)
@@ -0,0 +1,48 @@
+package lesson12.Less0n12;
+
+import lesson12.Less0n12.Base;
+
+public class Truck extends Vehicle {
+
+    double load;
+    double max_load;
+
+
+    public Truck(double load, double max_load, double petrol, double max_petrol) {
+        super(petrol, max_petrol);
+        this.load = load;
+        this.max_load = max_load;
+    }
+
+    public double getCurrentLoad() {
+        return load;
+    }
+
+    public double getMaxLoad() {
+        return max_load;
+    }
+
+    @Override
+        // переопределение род метода
+    void arrive() {
+        super.arrive();
+        Base.goods_on_base += load;
+        load = 0;
+    }
+
+    @Override
+    boolean leave() {
+        if (!super.leave()) {
+            return false;
+        }
+
+        if (Base.goods_on_base < max_load) {
+            load = Base.goods_on_base;
+            Base.goods_on_base = 0;
+        } else {
+            Base.goods_on_base = Base.goods_on_base - max_load;
+            load = max_load;
+        }
+        return true;
+    }
+}
Index: src/lesson12/Less0n12/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Main.java b/src/lesson12/Less0n12/Main.java
new file mode 100644
--- /dev/null	(date 1644935941911)
+++ b/src/lesson12/Less0n12/Main.java	(date 1644935941911)
@@ -0,0 +1,14 @@
+package lesson12.Less0n12;
+
+
+import lesson12.Less0n12.Vehicle;
+import lesson12.Less0n12.Bus;
+import lesson12.Less0n12.Base;
+
+
+public class Main {
+    public static void main(String[] args) {
+
+
+    }
+}
Index: src/Lesson10/Lesson10PracticaInterface/Sapoznik.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Sapoznik.java b/src/Lesson10/Lesson10PracticaInterface/Sapoznik.java
new file mode 100644
--- /dev/null	(date 1645182797456)
+++ b/src/Lesson10/Lesson10PracticaInterface/Sapoznik.java	(date 1645182797456)
@@ -0,0 +1,4 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Sapoznik {
+}
Index: src/lesson12/Less0n12/Base_Tests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Less0n12/Base_Tests.java b/src/lesson12/Less0n12/Base_Tests.java
new file mode 100644
--- /dev/null	(date 1644936861104)
+++ b/src/lesson12/Less0n12/Base_Tests.java	(date 1644936861104)
@@ -0,0 +1,446 @@
+package lesson12.Less0n12;
+
+import java.io.*;
+import java.util.*;
+
+import lesson12.Less0n12.Base;
+import junit.framework.TestCase;
+
+public class Base_Tests extends TestCase {
+
+    private ByteArrayOutputStream out = new ByteArrayOutputStream();
+
+    protected void setUp() throws IOException {
+        System.setOut(new PrintStream(out));
+    }
+
+    public void test1() {
+// ctor
+        Vehicle v = new Vehicle(19.5, 60);
+
+// get
+        assertEquals("Неправильно сработал конструктор Vehicle(petrol,tank)", 19.5, v.getPetrolAmount());
+        assertEquals("Неправильно сработал конструктор Vehicle(petrol,tank)", 60.0, v.getTankVolume());
+
+        Base.vehicles_on_base = 49;
+        Base.people_on_base = 84;  // count
+        Base.petrol_on_base = 1051;  // liters
+        Base.goods_on_base = 5.032;  // tons
+
+// arrive
+        v.arrive();
+
+        assertEquals("Вызов Vehicle.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+        assertEquals("Вызов Vehicle.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+        assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 85, Base.people_on_base);
+        assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+        assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+// leave
+        assertEquals("Vehicle.leave() вернул неправильное значение", true, v.leave());
+
+        assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+        assertEquals("Вызов Vehicle.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+
+        assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+        assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 84, Base.people_on_base);
+        assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+        assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+    }
+
+    public void test2() {
+// ctor
+        Bus v = new Bus(32, 40, 19.5, 60.0);
+
+        assertEquals("Неправильно сработал конструктор Bus с параметрами", 32, v.getPeopleCount());
+        assertEquals("Неправильно сработал конструктор Bus с параметрами", 40, v.getMaxPeople());
+        assertEquals("Неправильно сработал конструктор Bus с параметрами", 19.5, v.getPetrolAmount());
+        assertEquals("Неправильно сработал конструктор Bus с параметрами", 60.0, v.getTankVolume());
+
+        Base.vehicles_on_base = 49;
+        Base.people_on_base = 84;  // count
+        Base.petrol_on_base = 1051;  // liters
+        Base.goods_on_base = 5.032;  // tons
+
+// arrive
+        v.arrive();
+
+        assertEquals("Вызов Bus.arrive() должен высадить людей", 0, v.getPeopleCount());
+        assertEquals("Вызов Bus.arrive() странно повлиял на количество мест", 40, v.getMaxPeople());
+        assertEquals("Вызов Bus.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+        assertEquals("Вызов Bus.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+        assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 85 + 32, Base.people_on_base);
+        assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+        assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+// leave
+        assertEquals("Bus.leave() вернул неправильное значение", true, v.leave());
+
+        assertEquals("После отъезда автобус должен быть полный", 40, v.getPeopleCount());
+        assertEquals("Вызов Bus.leave() странно повлиял на количество мест", 40, v.getMaxPeople());
+        assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+        assertEquals("Вызов Bus.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+        assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 84 + 32 - 40, Base.people_on_base);
+        assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+        assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+    }
+
+    public void test3() {
+        {
+// ctor
+            Vehicle v = new Vehicle(19.5, 60);
+
+// get
+            assertEquals("Неправильно сработал конструктор Vehicle(petrol,tank)", 19.5, v.getPetrolAmount());
+            assertEquals("Неправильно сработал конструктор Vehicle(petrol,tank)", 60.0, v.getTankVolume());
+
+            Base.vehicles_on_base = 49;
+            Base.people_on_base = 84;  // count
+            Base.petrol_on_base = 1051;  // liters
+            Base.goods_on_base = 5.032;  // tons
+
+// arrive
+            v.arrive();
+
+            assertEquals("Вызов Vehicle.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+            assertEquals("Вызов Vehicle.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+            assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+            assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 85, Base.people_on_base);
+            assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+            assertEquals("Вызов Vehicle.arrive() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+            // leave
+            assertEquals("Vehicle.leave() вернул неправильное значение", true, v.leave());
+
+            assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+            assertEquals("Вызов Vehicle.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 84, Base.people_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+////////// not enough ////////////
+            Vehicle v2 = new Vehicle(50, 100);
+            Base.petrol_on_base = 40;
+            v2.arrive();
+            assertEquals("Когда не хватает бензина, уехать должно быть невозможно", false, v2.leave());
+
+// all the same
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 50, Base.vehicles_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 85, Base.people_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 40.0, Base.petrol_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 5.032, Base.goods_on_base);
+
+//////// exactly //////////
+            Base.petrol_on_base = 50;
+            assertEquals("Когда бензина хватает, уехать должно быть возможно", true, v2.leave());
+
+// left
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 84, Base.people_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 0.0, Base.petrol_on_base);
+            assertEquals("Вызов Vehicle.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+////////// no driver ////////////
+            v2.arrive();
+            Base.people_on_base = 0;
+            Base.petrol_on_base = 100;
+            assertEquals("Когда нет водителя, уехать должно быть невозможно", false, v2.leave());
+
+// same
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 50, Base.vehicles_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 0, Base.people_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 100.0, Base.petrol_on_base);
+            assertEquals("Вызов Vehicle.leave() не должен был ничего поменять на базе", 5.032, Base.goods_on_base);
+
+        }
+////////////// BUS ////////////////
+        {
+// ctor
+            Bus v = new Bus(32, 40, 19.5, 60);
+
+// get
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 32, v.getPeopleCount());
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 40, v.getMaxPeople());
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 19.5, v.getPetrolAmount());
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 60.0, v.getTankVolume());
+
+// ctor exact
+            Bus v_exact = new Bus(40, 40, 60, 60);
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 40, v_exact.getPeopleCount());
+            assertEquals("Неправильно сработал конструктор Bus с параметрами", 40, v_exact.getMaxPeople());
+
+            v_exact.arrive();
+            v_exact.leave();
+
+            Base.petrol_on_base = 1051;  // liters
+            Base.people_on_base = 84;  // count
+            Base.goods_on_base = 5.032;  // tons
+            Base.vehicles_on_base = 49;
+
+// arrive
+            v.arrive();
+
+            assertEquals("Вызов Bus.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+            assertEquals("Вызов Bus.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+            assertEquals("Вызов Bus.arrive() должен высадить людей", 0, v.getPeopleCount());
+            assertEquals("Вызов Bus.arrive() странно повлиял на количество мест", 40, v.getMaxPeople());
+
+            assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+            assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 85 + 32, Base.people_on_base);
+            assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+            assertEquals("Вызов Bus.arrive() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+// leave
+            assertEquals("Bus.leave() вернул неправильное значение", true, v.leave());
+
+            assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+            assertEquals("Вызов Bus.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+            assertEquals("После отъезда автобус должен быть полный", v.getMaxPeople(), v.getPeopleCount());
+
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 84 - (40 - 32), Base.people_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+////////// not enough petrol ////////////
+            Bus v2 = new Bus(32, 40, 50, 100);
+            Base.petrol_on_base = 40;
+            v2.arrive();
+            assertEquals("Когда не хватает бензина, уехать должно быть невозможно", false, v2.leave());
+
+// all the same
+            assertEquals("Вызов Bus.leave() не должен был ничего поменять на базе", 50, Base.vehicles_on_base);
+            assertEquals("Вызов Bus.leave() не должен был ничего поменять на базе", 85 - 8 + 32, Base.people_on_base);
+            assertEquals("Вызов Bus.leave() не должен был ничего поменять на базе", 40.0, Base.petrol_on_base);
+            assertEquals("Вызов Bus.leave() не должен был ничего поменять на базе", 5.032, Base.goods_on_base);
+
+//////// exactly petrol //////////
+            Base.petrol_on_base = 50;
+            Base.people_on_base = 101; // 100 + driver
+            assertEquals("Когда бензина хватает, уехать должно быть возможно", true, v2.leave());
+
+// left
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 100 - 40, Base.people_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 0.0, Base.petrol_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+
+
+//////// just one passanger //////////
+            Bus v3 = new Bus(32, 40, 19.5, 60);
+            v3.arrive();
+            Base.people_on_base = 8;
+            Base.petrol_on_base = 100;
+            assertEquals("Когда бензина хватает, уехать должно быть возможно", true, v3.leave());
+
+// left
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 0, Base.people_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 100.0 - (60 - 19.5), Base.petrol_on_base);
+            assertEquals("Вызов Bus.leave() неправильно записал данные в \"базу\"", 5.032, Base.goods_on_base);
+        }
+    }// test3
+
+    public void test4() {
+// ctor
+        Truck v = new Truck(3.5, 4.0, 19.5, 60.0);
+
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 3.5, v.getCurrentLoad());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 4.0, v.getMaxLoad());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 19.5, v.getPetrolAmount());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 60.0, v.getTankVolume());
+
+        Base.vehicles_on_base = 49;
+        Base.people_on_base = 84;  // count
+        Base.petrol_on_base = 1051;  // liters
+        Base.goods_on_base = 5.032;  // tons
+
+// arrive
+        v.arrive();
+
+        assertEquals("Вызов Truck.arrive() должен выгрузить все товары", 0.0, v.getCurrentLoad());
+        assertEquals("Вызов Truck.arrive() странно повлиял на грузоподъемность", 4.0, v.getMaxLoad());
+        assertEquals("Вызов Truck.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+        assertEquals("Вызов Truck.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 85, Base.people_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 5.032 + 3.5, Base.goods_on_base);
+
+// leave
+        assertEquals("Truck.leave() вернул неправильное значение", true, v.leave());
+
+        assertEquals("После отъезда грузовик должен быть загружен", v.getMaxLoad(), v.getCurrentLoad());
+        assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+        assertEquals("Вызов Truck.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 84, Base.people_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 5.032 + 3.5 - 4.0, Base.goods_on_base);
+    }
+
+    public void test5() {
+// ctor
+        Truck v = new Truck(3.5, 4.0, 19.5, 60);
+
+// get
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 3.5, v.getCurrentLoad());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 4.0, v.getMaxLoad());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 19.5, v.getPetrolAmount());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 60.0, v.getTankVolume());
+
+// ctor exact
+        Truck v_exact = new Truck(4.0, 4.0, 60, 60);
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 4.0, v_exact.getCurrentLoad());
+        assertEquals("Неправильно сработал конструктор Truck с параметрами", 4.0, v_exact.getMaxLoad());
+
+        v_exact.arrive();
+        v_exact.leave();
+
+        Base.petrol_on_base = 1051;  // liters
+        Base.people_on_base = 84;  // count
+        Base.goods_on_base = 5.032;  // tons
+        Base.vehicles_on_base = 49;
+
+// arrive
+        v.arrive();
+
+        assertEquals("Вызов Truck.arrive() странно повлиял на бензин", 19.5, v.getPetrolAmount());
+        assertEquals("Вызов Truck.arrive() странно повлиял на объем бака", 60.0, v.getTankVolume());
+
+        assertEquals("Вызов Truck.arrive() должен выгрузить товары", 0.0, v.getCurrentLoad());
+        assertEquals("Вызов Truck.arrive() странно повлиял на грузопоъемность", 4.0, v.getMaxLoad());
+
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 50, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 85, Base.people_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 1051.0, Base.petrol_on_base);
+        assertEquals("Вызов Truck.arrive() неправильно записал данные в \"базу\"", 5.032 + 3.5, Base.goods_on_base);
+
+// leave
+        assertEquals("Truck.leave() вернул неправильное значение", true, v.leave());
+
+        assertEquals("После отъезда бак должен быть полный", 60.0, v.getPetrolAmount());
+        assertEquals("Вызов Truck.leave() странно повлиял на объем бака", 60.0, v.getTankVolume());
+        assertEquals("После отъезда автобус должен быть полный", v.getMaxLoad(), v.getCurrentLoad());
+
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 84, Base.people_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 1051.0 - (60 - 19.5), Base.petrol_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 5.032 + 3.5 - 4.0, Base.goods_on_base);
+
+////////// not enough petrol ////////////
+        Truck v2 = new Truck(3.5, 4.0, 50, 100);
+        Base.petrol_on_base = 40;
+        Base.goods_on_base = 5.032;
+        v2.arrive();
+        assertEquals("Когда не хватает бензина, уехать должно быть невозможно", false, v2.leave());
+
+// all the same
+        assertEquals("Вызов Truck.leave() не должен был ничего поменять на базе", 50, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.leave() не должен был ничего поменять на базе", 85, Base.people_on_base);
+        assertEquals("Вызов Truck.leave() не должен был ничего поменять на базе", 40.0, Base.petrol_on_base);
+        assertEquals("Вызов Truck.leave() не должен был ничего поменять на базе", 5.032 + 3.5, Base.goods_on_base);
+
+//////// exactly petrol //////////
+        Base.petrol_on_base = 50;
+        Base.people_on_base = 101; // 100 + driver
+        assertEquals("Когда бензина хватает, уехать должно быть возможно", true, v2.leave());
+
+// left
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 49, Base.vehicles_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 100, Base.people_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 0.0, Base.petrol_on_base);
+        assertEquals("Вызов Truck.leave() неправильно записал данные в \"базу\"", 5.032 + 3.5 - 4.0, Base.goods_on_base);
+    }
+
+    public void test6() {
+        Base.petrol_on_base = 15000;
+        Base.people_on_base = 23;
+        Base.goods_on_base = 1.150;
+        Base.vehicles_on_base = 14;
+
+        java.util.Vector<Vehicle> base = new java.util.Vector<Vehicle>();
+        for (int test = 0; test < 1000; test++) {
+
+            // add
+            if (Math.random() > 0.5) {
+                // prepare vehicle
+                int type = (int) (Math.random() * 3);
+                Vehicle v;
+                int tank = (int) (Math.random() * 160) + 40;
+
+                // create this type
+                if (type == 0) {
+                    v = new Vehicle((int) (Math.random() * tank) + 1, tank);
+                }// 0
+                else if (type == 1) {
+                    int people = (int) (Math.random() * 96) + 5;
+                    v = new Bus((int) (Math.random() * people) + 1, people, (int) (Math.random() * tank) + 1, tank);
+                }// 1
+                else {
+                    assert type == 2;
+                    int max = (int) (Math.random() * 50) + 1;
+                    v = new Truck((Math.random() * max) * 0.001, max * 0.001, (int) (Math.random() * tank) + 1, tank);
+                }// 2
+
+                v.arrive();
+                base.add(v);
+            }// if add
+            // else - leave
+            else if (!base.isEmpty()) {
+                int i = (int) (Math.random() * base.size());
+                Vehicle v = base.elementAt(i);
+
+                // remember
+                int pn = Base.people_on_base;
+                int vn = Base.vehicles_on_base;
+                double pen = Base.petrol_on_base;
+                double gn = Base.goods_on_base;
+
+                if (v.leave() == true) {
+                    base.remove(i);
+
+                    assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.people_on_base >= 0);
+                    assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.vehicles_on_base >= 0);
+                    assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.petrol_on_base >= 0);
+                    assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.goods_on_base >= 0);
+                }// if left
+                // not left
+                else {
+                    assertTrue("Счетчики \"базы\" не должны меняться, если машина не смогла уехать", Base.people_on_base == pn);
+                    assertTrue("Счетчики \"базы\" не должны меняться, если машина не смогла уехать", Base.vehicles_on_base == vn);
+                    assertTrue("Счетчики \"базы\" не должны меняться, если машина не смогла уехать", Base.petrol_on_base == pen);
+                    assertTrue("Счетчики \"базы\" не должны меняться, если машина не смогла уехать", Base.goods_on_base == gn);
+                }
+            }// if can leave
+        }// for test
+
+        // delete others
+        while (!base.isEmpty()) {
+            Vehicle v = base.lastElement();
+            base.remove(base.size() - 1);
+            v.leave();  // may be cannot..
+        }
+
+        assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.people_on_base >= 0);
+        assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.vehicles_on_base >= 0);
+        assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.petrol_on_base >= 0);
+        assertTrue("Счетчики \"базы\" не могут быть отрицательными", Base.goods_on_base >= 0);
+    }
+}
+
+
Index: src/lesson12/lesson12/MainLinkedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/lesson12/MainLinkedList.java b/src/lesson12/lesson12/MainLinkedList.java
new file mode 100644
--- /dev/null	(date 1646407913061)
+++ b/src/lesson12/lesson12/MainLinkedList.java	(date 1646407913061)
@@ -0,0 +1,19 @@
+package lesson12.lesson12;
+
+import java.util.LinkedList;
+
+public class MainLinkedList {
+    public static void main(String[] args) {
+        LinkedList<Integer> numbers = new  LinkedList<Integer>();
+        numbers.add(3);
+        numbers.add(4);
+        numbers.add(5);
+
+
+    numbers.add(0,111);
+    numbers.set(0,222);
+    numbers.addLast(6);
+    numbers.remove(1);
+        System.out.println(numbers);
+    }
+}
Index: src/Lesson9/HomeWork/Dishes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/HomeWork/Dishes.java b/src/Lesson9/HomeWork/Dishes.java
new file mode 100644
--- /dev/null	(date 1644998904611)
+++ b/src/Lesson9/HomeWork/Dishes.java	(date 1644998904611)
@@ -0,0 +1,55 @@
+package Lesson9.HomeWork;
+
+
+import java.util.ArrayList;
+import java.util.Objects;
+
+import java.util.Objects;
+
+public class Dishes {
+    public String titul;
+    public int weight;
+    public int price;
+    public ArrayList<Ingridient> ingridients = new ArrayList<>();
+
+    public String getTitul() {
+        return titul;
+    }
+
+    public void setTitul(String titul) {
+        this.titul = titul;
+    }
+
+    public int getWeight() {
+        return weight;
+    }
+
+    public void setWeight(int weight) {
+        this.weight = weight;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Dishes dishes = (Dishes) o;
+        return weight == dishes.weight && price == dishes.price && Objects.equals(titul, dishes.titul) && Objects.equals(ingridients, dishes.ingridients);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(titul, weight, price, ingridients);
+    }
+
+    public void addIngr(Ingridient ingridient){
+        ingridients.add(ingridient);
+    }
+}
Index: src/Lesson9/HomeWork/Drinks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/HomeWork/Drinks.java b/src/Lesson9/HomeWork/Drinks.java
new file mode 100644
--- /dev/null	(date 1644998924317)
+++ b/src/Lesson9/HomeWork/Drinks.java	(date 1644998924317)
@@ -0,0 +1,7 @@
+package Lesson9.HomeWork;
+
+public class Drinks {
+    public String titul;
+    public  int weight;
+    public int price;
+}
Index: src/Lesson9/HomeWork/Ingridient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/HomeWork/Ingridient.java b/src/Lesson9/HomeWork/Ingridient.java
new file mode 100644
--- /dev/null	(date 1644998954672)
+++ b/src/Lesson9/HomeWork/Ingridient.java	(date 1644998954672)
@@ -0,0 +1,39 @@
+package Lesson9.HomeWork;
+
+
+import java.util.Objects;
+
+public class Ingridient {
+    public  int unitMeusurent;
+    public String title;
+
+    public int getUnitMeusurent() {
+        return unitMeusurent;
+    }
+
+    public void setUnitMeusurent(int unitMeusurent) {
+        this.unitMeusurent = unitMeusurent;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        if (!super.equals(o)) return false;
+        Ingridient that = (Ingridient) o;
+        return unitMeusurent == that.unitMeusurent && title == that.title;
+    }
+
+
+    public int hashCode() {
+        return Objects.hash(super.hashCode(), unitMeusurent, title);
+    }
+}
Index: src/Lesson9/HomeWork/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/HomeWork/Menu.java b/src/Lesson9/HomeWork/Menu.java
new file mode 100644
--- /dev/null	(date 1644998980932)
+++ b/src/Lesson9/HomeWork/Menu.java	(date 1644998980932)
@@ -0,0 +1,17 @@
+package Lesson9.HomeWork;
+
+import java.util.ArrayList;
+
+public class Menu {
+    public ArrayList<Drinks> drinks = new ArrayList<>();
+    public ArrayList<Dishes> dishes = new ArrayList<>();
+
+
+    public void addDish(Dishes dish){
+        dishes.add(dish);
+    }
+
+    public void addDrin(Drinks drin){
+        drinks.add(drin);
+    }
+}
Index: src/Lesson9/HomeWork/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson9/HomeWork/Main.java b/src/Lesson9/HomeWork/Main.java
new file mode 100644
--- /dev/null	(date 1644999074494)
+++ b/src/Lesson9/HomeWork/Main.java	(date 1644999074494)
@@ -0,0 +1,21 @@
+package Lesson9.HomeWork;
+
+
+
+public class Main {
+
+    public static void main(String[] args) {
+
+        Ingridient ingridient = new Ingridient();
+        Ingridient ingridient1 = new Ingridient();
+        Dishes dishes = new Dishes();
+        Menu menu = new Menu();
+        Drinks drinks= new Drinks();
+
+        dishes.addIngr(ingridient);
+        dishes.addIngr(ingridient1);
+        menu.addDish(dishes);
+        menu.addDrin(drinks);
+
+    }
+}
Index: src/Lesson7/Lesson7/Lesson7/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Lesson7/Lesson7/Main.java b/src/Lesson7/Lesson7/Lesson7/Main.java
new file mode 100644
--- /dev/null	(date 1645032231702)
+++ b/src/Lesson7/Lesson7/Lesson7/Main.java	(date 1645032231702)
@@ -0,0 +1,43 @@
+package Lesson7.Lesson7.Lesson7;
+
+import java.io.*;
+import java.nio.file.Files;
+
+
+
+public class Main {
+
+
+
+
+    public static void main(String[] args) {
+
+
+        int a =-8;
+        if(a<0){
+            throw new NullPointerException("A<0");
+        }else{
+            System.out.println("fff");
+        }
+
+
+
+        try {
+            String text = null;
+            System.out.println(text.length());
+        } catch (RuntimeException e) {
+            System.out.println("не проверяемые код");
+        }
+
+        try {
+            Files.copy(new File("D://sdwwd").toPath(), new File("C://dsddw").toPath());
+        } catch (IOException e) {
+            // e.printStackTrace();
+            System.out.println("доступ к файлу, который не существует.");
+
+        } finally {
+            System.out.println("все гуд погнали дальше");
+        }
+    }
+}
+
Index: src/Lesson7/Lesson7/Lesson7/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Lesson7/Lesson7/Test.java b/src/Lesson7/Lesson7/Lesson7/Test.java
new file mode 100644
--- /dev/null	(date 1645017295617)
+++ b/src/Lesson7/Lesson7/Lesson7/Test.java	(date 1645017295617)
@@ -0,0 +1,7 @@
+package Lesson7.Lesson7.Lesson7;
+
+public class Test {
+
+
+
+}
Index: src/testJAva/Testing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/testJAva/Testing.java b/src/testJAva/Testing.java
new file mode 100644
--- /dev/null	(date 1647341165846)
+++ b/src/testJAva/Testing.java	(date 1647341165846)
@@ -0,0 +1,27 @@
+package testJAva;
+
+import java.util.ArrayList;
+import java.util.Collections;
+
+public class Testing {
+    public static void main(String[] args) {
+
+        ArrayList<Integer> lottery = new ArrayList<>(100);
+        for (int i = 1; i <= 100; i++) {
+
+            lottery.add(i);//добавляем в барабан числа от 1 до 100
+        }
+
+        Collections.shuffle(lottery);//перемешиваем
+        System.out.println("Внимание! Из барабана появляются первые 10 чисел!");
+        for (int i = 0; i < 10; i++) {
+
+            System.out.print(lottery.get(i) + " ");
+        }
+
+    }
+
+
+
+
+}
Index: src/Lesson8/lesson8/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/lesson8/Animal.java b/src/Lesson8/lesson8/Animal.java
new file mode 100644
--- /dev/null	(date 1645095347781)
+++ b/src/Lesson8/lesson8/Animal.java	(date 1645095347781)
@@ -0,0 +1,58 @@
+package Lesson8.lesson8;
+
+import java.util.Objects;
+
+public class Animal {
+    private int age;
+    private String name;
+
+
+    public void voice(){
+        System.out.println("Животное кричит");
+    }
+
+    public Animal() {
+    }
+
+    public Animal(int age, String name) {
+        this.age = age;
+        this.name = name;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Animal animal = (Animal) o;
+        return age == animal.age && Objects.equals(name, animal.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(age, name);
+    }
+
+    @Override
+    public String toString() {
+        return "Animal{" +
+                "age=" + age +
+                ", name='" + name + '\'' +
+                '}';
+    }
+}
Index: src/Lesson8/lesson8/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/lesson8/Main.java b/src/Lesson8/lesson8/Main.java
new file mode 100644
--- /dev/null	(date 1645112629554)
+++ b/src/Lesson8/lesson8/Main.java	(date 1645112629554)
@@ -0,0 +1,23 @@
+package Lesson8.lesson8;
+
+public class Main {
+    public static void main(String[] args) {
+
+        Animal slon1 = new Animal(12, "Noise");
+        Animal slon2 = new Animal(12, "Noise");
+
+
+        System.out.println(slon1.getClass());
+        //class Lesson8.lesson8.Animal
+        System.out.println(slon1.equals(slon2));
+        //true
+        System.out.println(slon1.hashCode());
+        //75447343
+        System.out.println(slon1.hashCode());
+       // 75447343
+        System.out.println(slon2.hashCode());
+       // 75447343
+
+
+    }
+}
Index: src/Lesson8/lesson8/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson8/lesson8/Cat.java b/src/Lesson8/lesson8/Cat.java
new file mode 100644
--- /dev/null	(date 1645093311974)
+++ b/src/Lesson8/lesson8/Cat.java	(date 1645093311974)
@@ -0,0 +1,9 @@
+package Lesson8.lesson8;
+
+public class Cat extends Animal {
+
+    @Override
+    public void voice() {
+        System.out.println("may");
+    }
+}
Index: src/Lesson10/Lesson10PracticaInterface/ObuvFOFIx.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/ObuvFOFIx.java b/src/Lesson10/Lesson10PracticaInterface/ObuvFOFIx.java
new file mode 100644
--- /dev/null	(date 1645189140923)
+++ b/src/Lesson10/Lesson10PracticaInterface/ObuvFOFIx.java	(date 1645189140923)
@@ -0,0 +1,10 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public interface ObuvFOFIx {
+
+
+    String sole();
+    String kindOfMaterial();
+    int condition();
+
+}
Index: src/Lesson10/Lesson10PracticaInterface/IMatrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/IMatrix.java b/src/Lesson10/Lesson10PracticaInterface/IMatrix.java
new file mode 100644
--- /dev/null	(date 1645190237287)
+++ b/src/Lesson10/Lesson10PracticaInterface/IMatrix.java	(date 1645190237287)
@@ -0,0 +1,159 @@
+package Lesson10.Lesson10PracticaInterface;
+
+/**
+ * Интерфейс работы с матрицами
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface IMatrix {
+	
+	/**
+	 * Размер матрицы для конструктора без параметров
+	 */
+	int DEFAULT_MATRIX_SIZE = 1;
+	
+	/**
+	 * Возвращает количество строк матрицы
+	 * 
+	 * @return количесвто строк матрицы
+	 */
+	int getRows();
+	
+	/**
+	 * Возвращает количество столбцов матрицы
+	 * 
+	 * @return количество столбцов матрицы
+	 */
+	int getColumns();
+	
+	/**
+	 * Возвращает элемент матрицы по индексам
+	 * 
+	 * @param rowIndex индекс строки 
+	 * @param colIndex индекс столбца
+	 * @return элемент матрицы по индексам
+	 * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+	 * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+	 */
+	double getValueAt(int rowIndex, int colIndex) throws IndexOutOfBoundsException;
+	
+	/**
+	 * Устанавливает элемент матрицы по индексам
+	 * 
+	 * @param rowIndex индекс строки 
+	 * @param colIndex индекс столбца
+	 * @param value новое значение элемента
+	 * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+	 * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+	 */
+	void setValueAt(int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException;
+	
+	/**
+	 * Возвращает сумму текущей матрицы и второго аргумента. <br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return сумма матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix add(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает разность текущей матрицы и второго аргумента.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b> 
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return разность матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix sub(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает произведение текущей матрицы и второго аргумента.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b> 
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return произведение матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix mul(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает произведение текущей матрицы на число.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+	 * 
+	 * @param value число
+	 * @return произведение <b><i>(новый объект матрицы)</i></b>
+	 */
+	IMatrix mul(double value);
+	
+	/**
+	 * Возвращает транспонированную матрицу по отношению к текущей
+	 * 
+	 * @return транспонированная матрица по отношению к текущей
+	 */
+	IMatrix transpose();
+	
+	/**
+	 * Заполняет текущю матрицу заднным значением
+	 * 
+	 * @param value значение
+	 */
+	void fillMatrix(double value);
+	
+	/**
+	 * Вычисляет детерминант матрицы.<br/>
+	 * Описание алгоритма для любой матрицы тут: <a target="_blank" href="http://ru.wikipedia.org/wiki/LU-%D1%80%D0%B0%D0%B7%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">LU-разложение</a>
+	 * 
+	 * @return детерминант
+	 */
+	double determinant();
+	
+	/**
+	 * Проверяет является ли текущая матрица нулевой<br/>
+	 * Нулевая матрица - матрица у которой все элементы нули:
+	 * 
+	 * <table>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * </table>
+	 * 
+	 * @return <b>true</b> если текущая матрица нулевая
+	 */
+	boolean isNullMatrix();
+	
+	/**
+	 * Проверяет является ли текущая матрица единичной<br/>
+	 * Единичная матрица - матрица у которой на главной диагонали единицы, а остальные элементы нули:
+	 * 
+	 * <table>
+	 * <tr><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td></tr>
+	 * </table>
+	 * 
+	 * @return <b>true</b> если текущая матрица единичная
+	 */
+	boolean isIdentityMatrix();
+	
+	/**
+	 * Проверяет является ли текущая матрица квадратной. <br/>
+	 * Т.е. матрица у которой количество строк равно количеству столбцов<br/>
+	 * 
+	 * @return <b>true</b> если текущая матрица квадратная
+	 */
+	boolean isSquareMatrix();
+	
+	/**
+	 * Вывод матрицу на консоль
+	 * @see //System.out.println()
+	 */
+	void printToConsole();
+}
Index: src/Lesson10/Lesson10PracticaInterface/Matrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Matrix.java b/src/Lesson10/Lesson10PracticaInterface/Matrix.java
new file mode 100644
--- /dev/null	(date 1645216889140)
+++ b/src/Lesson10/Lesson10PracticaInterface/Matrix.java	(date 1645216889140)
@@ -0,0 +1,101 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Matrix implements IMatrix {
+
+    private double[][] matrix;
+
+
+    public Matrix(int rows, int cols) {
+        matrix = new double[rows][cols];
+    }
+
+
+    public Matrix(double[][] matrix) {
+        this.matrix = matrix;
+    }
+
+    @Override
+    public int getRows() {
+        return matrix.length;
+    }
+
+    @Override
+    public int getColumns() {
+        return 0;
+    }
+
+    @Override
+    public double getValueAt(int rowIndex, int colIndex) throws IndexOutOfBoundsException {
+        if (rowIndex > this.getRows() || rowIndex < 0) {
+            throw new IndexOutOfBoundsException("rowIndex>getRows");
+        }
+        if (colIndex > this.getColumns() || colIndex < 0) {
+            throw new IndexOutOfBoundsException("colIndex>this.getColumns");
+        }
+        return matrix[rowIndex][colIndex];
+    }
+        @Override
+        public void setValueAt ( int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException {
+
+        }
+
+        @Override
+        public IMatrix add (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix sub (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix mul (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+            return null;
+        }
+
+        @Override
+        public IMatrix mul ( double value){
+            return null;
+        }
+
+        @Override
+        public IMatrix transpose () {
+            return null;
+        }
+
+        @Override
+        public void fillMatrix ( double value){
+
+        }
+
+        @Override
+        public double determinant () {
+            return 0;
+        }
+
+        @Override
+        public boolean isNullMatrix () {
+            return false;
+        }
+
+        @Override
+        public boolean isIdentityMatrix () {
+            return false;
+        }
+
+        @Override
+        public boolean isSquareMatrix () {
+            return false;
+        }
+
+        @Override
+        public void printToConsole () {
+            for (int i = 0; i < matrix.length; i++) {
+                for (int j = 0; j < matrix.length; j++) {
+                    System.out.print(matrix[i][j] + " ");
+                }
+                System.out.println();
+            }
+        }
+    }
Index: src/Lesson10/Lesson10PracticaInterface/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson10/Lesson10PracticaInterface/Main1.java b/src/Lesson10/Lesson10PracticaInterface/Main1.java
new file mode 100644
--- /dev/null	(date 1645216705981)
+++ b/src/Lesson10/Lesson10PracticaInterface/Main1.java	(date 1645216705981)
@@ -0,0 +1,27 @@
+package Lesson10.Lesson10PracticaInterface;
+
+public class Main1 {
+    public static void main(String[] args) {
+
+        Matrix matrix =new Matrix(4,4);
+//        double[][] v = {{1, 2, 3, 4, 5},
+//                        {1, 2, 3, 4, 5},
+//                        {1, 2, 3, 4, 5}};
+//        Matrix matrix = new Matrix(v);
+//
+//        double[][] v1 = {{1, 2, 3, 4, 5},
+//                        {1, 2, 3, 4, 5},
+//                        {1, 2, 3, 4, 5}};
+//        Matrix matrix1 = new Matrix(v1);
+
+       // IMatrix addResult =matrix.add(matrix1);
+
+
+        // matrix.printToConsole();
+        //System.out.println(matrix.getRows());
+        // System.out.println(matrix.getColumns());
+       // System.out.println(matrix.getValueAt(2,2));
+
+
+    }
+}
Index: src/testJAva/Play.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/testJAva/Play.java b/src/testJAva/Play.java
new file mode 100644
--- /dev/null	(date 1647341117283)
+++ b/src/testJAva/Play.java	(date 1647341117283)
@@ -0,0 +1,35 @@
+package testJAva;
+
+
+
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Scanner;
+
+public class Play {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        PrintWriter out = new PrintWriter(System.out);
+        sc.nextLine();
+        String[] line = sc.nextLine().split(" ");
+
+        ArrayList<Integer> arr = new ArrayList<>();
+
+        for (int i = 0; i < line.length; i++) {
+            if (Long.parseLong(line[i]) % 2 != (i + 1) % 2) {
+                arr.add(i + 1);
+            }
+        }
+
+        if (arr.size() == 2 && arr.get(0) % 2 != arr.get(1) % 2) {
+            out.println(arr.get(0) + " " + arr.get(1));
+        } else if (arr.size() == 0 && line.length > 2) {
+            out.println("1 3");
+        } else {
+            out.println("-1 -1");
+        }
+
+        out.flush();
+    }
+}
+
Index: src/lesson12/lesson12/Coin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/lesson12/Coin.java b/src/lesson12/lesson12/Coin.java
new file mode 100644
--- /dev/null	(date 1646674686040)
+++ b/src/lesson12/lesson12/Coin.java	(date 1646674686040)
@@ -0,0 +1,93 @@
+package lesson12.lesson12;
+
+import java.util.Objects;
+
+public class Coin implements Comparable<Coin>{
+
+    private int year;
+    private int niminal;
+    private double diametr;
+    private String metal;
+
+    public Coin() {
+    }
+
+    public Coin(int year, int niminal, double diametr, String metal) {
+        this.year = year;
+        this.niminal = niminal;
+        this.diametr = diametr;
+        this.metal = metal;
+    }
+
+    public int getYear() {
+        return year;
+    }
+
+    public void setYear(int year) {
+        this.year = year;
+    }
+
+    public int getNiminal() {
+        return niminal;
+    }
+
+    public void setNiminal(int niminal) {
+        this.niminal = niminal;
+    }
+
+    public double getDiametr() {
+        return diametr;
+    }
+
+    public void setDiametr(double diametr) {
+        this.diametr = diametr;
+    }
+
+    public String getMetal() {
+        return metal;
+    }
+
+    public void setMetal(String metal) {
+        this.metal = metal;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Coin coin = (Coin) o;
+        return year == coin.year && niminal == coin.niminal && Double.compare(coin.diametr, diametr) == 0 && Objects.equals(metal, coin.metal);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(year, niminal, diametr, metal);
+    }
+
+    @Override
+    public String toString() {
+        return "Coin{" +
+                "year=" + year +
+                ", niminal=" + niminal +
+                ", diametr=" + diametr +
+                ", metal='" + metal + '\'' +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Coin o) {
+        if (this.getYear() != o.getYear()) {
+            return this.getYear() - o.getYear();
+        }
+        if(this.getNiminal() != o.getNiminal()){
+            return this.niminal- o.niminal;
+        }
+        if(this.getDiametr() != o.getDiametr()){
+            return Double.compare(this.getDiametr(),o.getDiametr());
+        }
+
+
+        return this.getMetal().compareTo(o.getMetal());
+    }
+
+}
Index: src/lesson12/lesson12/Main2Collection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/lesson12/Main2Collection.java b/src/lesson12/lesson12/Main2Collection.java
new file mode 100644
--- /dev/null	(date 1646673736266)
+++ b/src/lesson12/lesson12/Main2Collection.java	(date 1646673736266)
@@ -0,0 +1,44 @@
+package lesson12.lesson12;
+
+import lesson12.lesson12.Coin;
+
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.TreeSet;
+
+public class Main2Collection  {
+    public static void main(String[] args) {
+
+        Coin coin1 =new Coin(1992,10,2.4,"Золото");
+        Coin coin2 =new Coin(1992,10,2.4,"Золото");
+        Coin coin3 =new Coin(1990,1,5.4,"Серебро");
+        Coin coin4 =new Coin(1993,11,4.4,"Медь");
+        Coin coin5 =new Coin(1994,12,3.4,"Золото");
+
+        TreeSet<Coin> coins=new TreeSet<>();
+        coins.add(coin1);
+        coins.add(coin2);
+        coins.add(coin3);
+        coins.add(coin4);
+        coins.add(coin5);
+
+
+        //1-for each(везде)
+        for(Coin c:coins){
+            System.out.println(c);
+            // когда использовать?
+            // когда просто пройтись
+        }
+        //2-for(используется там где есть индексы)
+        //3-с помощью итератора (везде)
+        // тип данных<по чему будем проходить>название=колекция.итератор;метод если там еще
+        for( Iterator<Coin>iter=coins.iterator();iter.hasNext(); ){
+            //iter.remove();
+            //Аналог цикла For each
+            // когда нужно,что то сделать с элементом
+            //пример удалить метод remove
+        }
+
+    }
+
+}
Index: src/lesson14HashMap/HomeWork/DublicatWord.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/HomeWork/DublicatWord.java b/src/lesson14HashMap/HomeWork/DublicatWord.java
new file mode 100644
--- /dev/null	(date 1647273371868)
+++ b/src/lesson14HashMap/HomeWork/DublicatWord.java	(date 1647273371868)
@@ -0,0 +1,43 @@
+package lesson14HashMap.HomeWork;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+public class DublicatWord {
+    public static void main(String[] args) {
+
+        String repeat = "  Повторились ли слова в повторе или не повторились";
+        String sentence = "Ёлочка вам нравится, ёлочка?";
+
+        List<String> words = new ArrayList<>();
+        for (String s : sentence.split(" ")) {
+            words.add(s.replaceAll("[^аА-яЯ-ёЁ-пП]", "").toLowerCase());
+        }
+
+        Map<String, Long> frequency = countDuplicates(words);
+        System.out.println(frequency);
+
+
+        List<String> wordRepeat = new ArrayList<>();
+        for (String r : repeat.split(" ")) {
+            wordRepeat.add(r.replaceAll("Аа-Яя", "").toLowerCase());
+        }
+
+        Map<String, Long> copyWord = cointWord(wordRepeat);
+        System.out.println(copyWord);
+
+
+    }
+
+    private static Map<String, Long> cointWord(List<String> stringList) {
+        return stringList.stream().collect(Collectors.toMap(Function.identity(),v -> 1L, Long::sum));
+    }
+
+    public static Map<String, Long> countDuplicates(List<String> inputList) {
+        return inputList.stream().collect(Collectors.toMap(Function.identity(), v -> 1L, Long::sum));
+    }
+
+}
Index: src/lesson14HashMap/WeakHAshMapMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/WeakHAshMapMain.java b/src/lesson14HashMap/WeakHAshMapMain.java
new file mode 100644
--- /dev/null	(date 1647263357898)
+++ b/src/lesson14HashMap/WeakHAshMapMain.java	(date 1647263357898)
@@ -0,0 +1,26 @@
+package lesson14HashMap;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+public class WeakHAshMapMain {
+    public static void main(String[] args) {
+
+        Map<Date, String> weakMap = new WeakHashMap<>();
+        Date date = new Date();
+        weakMap.put(date, "Information");
+
+        date = null;
+        System.gc();
+
+        for (int i = 0; i < 1000; i++) {
+            //
+            if (weakMap.isEmpty()) {
+                System.out.println("Empty" + i);
+                break;
+            }
+        }
+    }
+}
Index: src/lesson14HashMap/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14HashMap/Main.java b/src/lesson14HashMap/Main.java
new file mode 100644
--- /dev/null	(date 1647258769736)
+++ b/src/lesson14HashMap/Main.java	(date 1647258769736)
@@ -0,0 +1,23 @@
+package lesson14HashMap;
+
+import java.util.Map;
+
+public class Main {
+    public static void main(String[] args) {
+        Map<Integer,String> cache = new SimpleCache<>(2);
+
+        cache.put(1,"a");
+        cache.put(2,"b");
+        System.out.println("Стартовый кэш: " +cache);
+        cache.put(3,"c");
+        System.out.println("Стартовый кэш: " +cache);
+        cache.get(2);
+        System.out.println("Кэш после вызова get: " + cache);
+        cache.put(9,"i");
+
+        System.out.println("Кэш после испоьльзования: " + cache);
+
+        System.gc();
+    }
+
+}
Index: src/lesson12/CollectionUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/CollectionUtils.java b/src/lesson12/CollectionUtils.java
new file mode 100644
--- /dev/null	(date 1645544836295)
+++ b/src/lesson12/CollectionUtils.java	(date 1645544836295)
@@ -0,0 +1,63 @@
+package lesson12;
+
+import java.util.Collection;
+import java.util.Set;
+
+/**
+ * Утилиты для работы с коллекциями объектов 
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface CollectionUtils {
+
+	/**
+	 * Объединение двух коллекций с дубликатами
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая объединение a и b, может содержать дубликаты 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> union (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Пересечение двух коллекций с дубликатами
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая пересечение a и b, может содержать дубликаты 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> intersection (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Объединение двух коллекций без дубликатов
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая объединение a и b без дубликатов 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Set<Integer> unionWithoutDuplicate (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Пересечение двух коллекций без дубликатов 
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая пересечение a и b без дубликатов
+	 * @throws NullPointerException если a или b == null
+	 */
+	Set<Integer> intersectionWithoutDuplicate (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Разность двух коллекций  
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая разность a и b 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> difference (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+}
Index: src/lesson12/ColectionUtilsImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/ColectionUtilsImp.java b/src/lesson12/ColectionUtilsImp.java
new file mode 100644
--- /dev/null	(date 1646385163482)
+++ b/src/lesson12/ColectionUtilsImp.java	(date 1646385163482)
@@ -0,0 +1,73 @@
+package lesson12;
+
+import java.util.*;
+
+public class ColectionUtilsImp implements CollectionUtils {
+    @Override
+    public Collection<Integer> union(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        ArrayList<Integer> result = new ArrayList<>();
+        result.addAll(a);
+        result.addAll(b);
+        return result;
+    }
+
+    @Override
+    public Collection<Integer> intersection(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        ArrayList<Integer> result1 = new ArrayList<>();
+        result1.addAll(a);
+        result1.addAll(b);
+        result1.retainAll(a);
+        result1.retainAll(b);
+        return result1;
+    }
+
+    @Override
+    public Set<Integer> unionWithoutDuplicate(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        Set<Integer> result2 = new HashSet<>();
+        result2.addAll(a);
+        result2.addAll(b);
+        return result2;
+    }
+
+    @Override
+    public Set<Integer> intersectionWithoutDuplicate(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        Set<Integer> result3 = new HashSet<>();
+        result3.addAll(a);
+        result3.addAll(b);
+        return result3;
+
+    }
+
+    @Override
+    public Collection<Integer> difference(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+
+        Collection<Integer> result =new LinkedList<>();
+        for(Integer num:a){
+            if(!b.contains(num)){
+                result.add(num);
+            }
+        }
+
+        for(Integer num:b){
+            if(!a.contains(num)){
+                result.add(num);
+            }
+        }
+
+        result.addAll(a);
+        result.addAll(b);
+
+        result.retainAll(b);
+        result.removeAll(a);
+
+
+      return result;
+
+
+
+
+
+
+
+    }
+}
Index: src/lesson12/MainTestColection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/MainTestColection.java b/src/lesson12/MainTestColection.java
new file mode 100644
--- /dev/null	(date 1646385242700)
+++ b/src/lesson12/MainTestColection.java	(date 1646385242700)
@@ -0,0 +1,109 @@
+package lesson12;
+
+import org.junit.platform.commons.util.CollectionUtils;
+
+import java.util.*;
+
+public class MainTestColection {
+    public static void main(String[] args) {
+
+        LinkedList<Integer> a = new LinkedList<>();
+        if ((a == null))
+            throw new NullPointerException("a==Null");
+        a.add(2);
+        a.add(3);
+        a.add(4);
+        a.add(5);
+
+        HashSet<Integer> b = new HashSet<>();
+        if ((b == null))
+            throw new NullPointerException("b==Null");
+        b.add(6);
+        b.add(7);
+        b.add(8);
+        b.add(9);
+
+        ColectionUtilsImp utilsImp = new ColectionUtilsImp();
+        Collection<Integer> union = utilsImp.union(a, b);
+        System.out.println(union);
+        System.out.println("**************************************************************");
+
+        LinkedList<Integer> a2 = new LinkedList<>();
+        a2.add(1);
+        a2.add(2);
+        a2.add(3);
+        a2.add(4);
+
+        HashSet<Integer> b2 = new HashSet<>();
+        b2.add(4);
+        b2.add(5);
+        b2.add(6);
+        b2.add(1);
+
+
+        ColectionUtilsImp colectionUtilsImp = new ColectionUtilsImp();
+        Collection<Integer> colection = colectionUtilsImp.intersection(a2, b2);
+        System.out.println(colection);
+
+        //        Set<Integer> intersection = new HashSet<>(a2);
+//        intersection.retainAll(b2);
+//        System.out.println(intersection);
+
+
+        System.out.println("**************************************************************");
+
+        HashSet<Integer> a1 = new HashSet<>();
+        a1.add(6);
+        a1.add(7);
+        a1.add(8);
+        a1.add(9);
+
+        HashSet<Integer> b1 = new HashSet<>();
+        b1.add(3);
+        b1.add(7);
+        b1.add(8);
+        b1.add(9);
+
+        ColectionUtilsImp utilsImp2 = new ColectionUtilsImp();
+        Set<Integer> union2 = utilsImp2.unionWithoutDuplicate(a1, b1);
+        System.out.println(union2);
+        System.out.println("**************************************************************");
+
+
+        LinkedList<Integer> a3 = new LinkedList<>();
+        a3.add(6);
+        a3.add(7);
+        a3.add(8);
+        a3.add(9);
+
+        HashSet<Integer> b3 = new HashSet<>();
+        b3.add(5);
+        b3.add(3);
+        b3.add(8);
+        b3.add(9);
+
+        ColectionUtilsImp intersection1 = new ColectionUtilsImp();
+        Set<Integer> integerSet = intersection1.intersectionWithoutDuplicate(a3, b3);
+        System.out.println(integerSet);
+        System.out.println("**************************************************************");
+
+
+        LinkedList<Integer> a4 = new LinkedList<>();
+        a4.add(1);
+        a4.add(2);
+        a4.add(3);
+        a4.add(4);
+
+
+        LinkedList<Integer> b4 = new LinkedList<>();
+        b4.add(1);
+        b4.add(2);
+        b4.add(3);
+        b4.add(5);
+
+        Collection<Integer> diff = new LinkedList<>();
+
+        System.out.println();
+        System.out.println("**************************************************************");
+    }
+}
Index: src/lesson13/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main.java b/src/lesson13/Main.java
new file mode 100644
--- /dev/null	(date 1646670625488)
+++ b/src/lesson13/Main.java	(date 1646670625488)
@@ -0,0 +1,37 @@
+package lesson13;
+
+import java.util.*;
+
+public class Main {
+    public static void main(String[] args) {
+        LinkedList<Integer>strings =new LinkedList<>();
+        strings.add(4);//добавляет по очереди в массив
+        strings.add(3);
+        strings.add(2);
+        strings.add(1);
+
+        System.out.println(strings);
+
+        TreeSet<String> strings1 = new TreeSet<>();
+        strings1.add("ggg");// нету дублткатов
+        strings1.add("bbb");//сортирует
+        strings1.add("ccc");
+        strings1.add("ddd");
+        strings1.add("iii");
+        System.out.println(strings1);
+
+        TreeSet<Integer> strings2 = new TreeSet<>(new Comparator<Integer>() {
+            @Override
+            public int compare(Integer o1, Integer o2) {
+                return o2-o1;
+            }
+        });
+        strings2.add(9);
+        strings2.add(3);
+        strings2.add(8);
+        strings2.add(6);
+        System.out.println(strings2);
+
+
+    }
+}
Index: src/lesson12/TestArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/TestArrayList.java b/src/lesson12/TestArrayList.java
new file mode 100644
--- /dev/null	(date 1645533302615)
+++ b/src/lesson12/TestArrayList.java	(date 1645533302615)
@@ -0,0 +1,53 @@
+package lesson12;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+
+public class TestArrayList {
+    public static void main(String[] args) {
+        ArrayList<String>arrayList = new ArrayList<>();
+        LinkedList<String>linkedList =new LinkedList<>();
+
+        long startArraylistAdd = System.currentTimeMillis();
+        for(int i=0;i<10000000;i++){
+           arrayList.add("asd" + i);
+        }
+        long endArraylistAdd = System.currentTimeMillis();
+        System.out.println("Add ArrayList: "+(endArraylistAdd - startArraylistAdd));
+        //////////////////////////////////////////////////////////////////////////////
+        long startLinkedlistAdd = System.currentTimeMillis();
+        for(int i=0;i<10000000;i++){
+            linkedList.add("asd" + i);
+        }
+        long endLinkedlistAdd = System.currentTimeMillis();
+        System.out.println("Add LinkedList: "+(endLinkedlistAdd - startLinkedlistAdd));
+
+
+        ArrayList<Integer>numbers=new ArrayList<Integer>();
+        numbers.add(3);//добавили в массив
+        numbers.add(5);//
+        numbers.add(7);//
+        numbers.add(0,111);//добавит на 0 индекс
+        numbers.set(0,222);//заменяет на 0 индекс
+        numbers.contains(222);//имеется ли такое число
+        System.out.println(numbers.contains(222));//
+        numbers.stream().toList();
+        System.out.println(numbers.stream().toList());
+        //////////////////////////////////////////////////////////////////////////////
+        System.out.println("/////////////////////////////////////////////////////////////");
+
+        long startArraylistGet = System.currentTimeMillis();
+        for(int i=0;i<10000;i++){
+            arrayList.get( i);
+        }
+        long endArraylistGet = System.currentTimeMillis();
+        System.out.println("Get ArrayList: "+(endArraylistGet - startArraylistGet));
+        //////////////////////////////////////////////////////////////////////////////
+        long startLinkedlistGet = System.currentTimeMillis();
+        for(int i=0;i<10000;i++){
+            linkedList.get(i);
+        }
+        long endLinkedlistGet = System.currentTimeMillis();
+        System.out.println("Get LinkedList: "+(endLinkedlistGet - startLinkedlistGet));
+    }
+}
Index: untitled.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/untitled.iml b/untitled.iml
new file mode 100644
--- /dev/null	(date 1645546497970)
+++ b/untitled.iml	(date 1645546497970)
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/3.8.2/junit-3.8.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit5.7.0">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1639757177424)
+++ b/.idea/modules.xml	(date 1639757177424)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/untitled.iml" filepath="$PROJECT_DIR$/untitled.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1639760096381)
+++ b/.idea/misc.xml	(date 1639760096381)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/lesson2/Operation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Operation.java b/src/lesson2/Operation.java
new file mode 100644
--- /dev/null	(date 1643106764677)
+++ b/src/lesson2/Operation.java	(date 1643106764677)
@@ -0,0 +1,10 @@
+package lesson2;
+
+public class Operation {
+    public static void main(String[] args) {
+        int a = 10;
+        int b = 8;
+        int c = 28;
+        System.out.println(a!=b);
+    }
+}
Index: src/lesson2/MainIfElse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/MainIfElse.java b/src/lesson2/MainIfElse.java
new file mode 100644
--- /dev/null	(date 1643114706150)
+++ b/src/lesson2/MainIfElse.java	(date 1643114706150)
@@ -0,0 +1,35 @@
+package lesson2;
+
+public class MainIfElse {
+    public static void main(String[] args) {
+        int a = 10;
+        int b = 8;
+        int c = 28;
+        int d = 10;
+
+//        if(a==d && a != b && a < c){
+//            System.out.println("good");
+//        }
+//        else{
+//            System.out.println("losse");
+//        }
+
+        switch (3) {
+            case 1:
+                System.out.println("двоечник");
+                break;
+            case 2:
+                System.out.println("хорошист");
+                break;
+            case 3:
+                System.out.println("троечник");
+                break;
+            case 4:
+                System.out.println("отличник");
+                break;
+            default:
+                System.out.println("это не оценка");
+
+        }
+    }
+}
Index: src/Lesson7/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Lesson7/Test.java b/src/Lesson7/Test.java
new file mode 100644
--- /dev/null	(date 1644321342171)
+++ b/src/Lesson7/Test.java	(date 1644321342171)
@@ -0,0 +1,29 @@
+package Lesson7;
+
+import org.w3c.dom.ls.LSOutput;
+
+public class Test {
+    public static void main(String[] args) {
+
+        People people = new People();
+        people.age = 22;
+        people.name = "Dima";
+
+
+        People people1 = new People();
+        people1.age = 22;
+        people1.name = " david";
+
+        People topLeft = new People();
+        topLeft.name = " Vlad";
+        topLeft.age = 22;
+
+        people.printInfo();
+        people1.printInfo();
+        topLeft.printInfo();
+
+    }
+
+
+}
+
